
TP Final PdM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a3c  08003a3c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a44  08003a44  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000120  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a0  200001a0  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ee0  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002554  00000000  00000000  00031f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d10  00000000  00000000  000344e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c08  00000000  00000000  000351f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002739f  00000000  00000000  00035e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124d9  00000000  00000000  0005d19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea94e  00000000  00000000  0006f678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00159fc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003898  00000000  00000000  0015a01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003984 	.word	0x08003984

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08003984 	.word	0x08003984

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <debounceInit>:
static estadoMEF_t estadoActual;

static delay_t tiempo;


void debounceInit(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	estadoActual = BUTTON_UP;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <debounceInit+0x20>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000592:	2100      	movs	r1, #0
 8000594:	2000      	movs	r0, #0
 8000596:	f000 f9df 	bl	8000958 <BSP_PB_Init>
	delayInit(&tiempo, DURACION);
 800059a:	2128      	movs	r1, #40	; 0x28
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <debounceInit+0x24>)
 800059e:	f000 f86f 	bl	8000680 <delayInit>

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000009c 	.word	0x2000009c
 80005ac:	200000a0 	.word	0x200000a0

080005b0 <debounceUpdate>:



uint8_t debounceUpdate(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0


	switch (estadoActual) {
 80005b4:	4b30      	ldr	r3, [pc, #192]	; (8000678 <debounceUpdate+0xc8>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b03      	cmp	r3, #3
 80005ba:	d84f      	bhi.n	800065c <debounceUpdate+0xac>
 80005bc:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <debounceUpdate+0x14>)
 80005be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c2:	bf00      	nop
 80005c4:	080005d5 	.word	0x080005d5
 80005c8:	080005ef 	.word	0x080005ef
 80005cc:	08000619 	.word	0x08000619
 80005d0:	08000633 	.word	0x08000633
	case BUTTON_UP: // Actualizar salida del estado
		if (BSP_PB_GetState(BUTTON_USER)) {
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 fa15 	bl	8000a04 <BSP_PB_GetState>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d040      	beq.n	8000662 <debounceUpdate+0xb2>
			delayRead(&tiempo);
 80005e0:	4826      	ldr	r0, [pc, #152]	; (800067c <debounceUpdate+0xcc>)
 80005e2:	f000 f864 	bl	80006ae <delayRead>
			estadoActual = BUTTON_FALLING;
 80005e6:	4b24      	ldr	r3, [pc, #144]	; (8000678 <debounceUpdate+0xc8>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005ec:	e039      	b.n	8000662 <debounceUpdate+0xb2>

	case BUTTON_FALLING:
		if (delayRead(&tiempo)) {
 80005ee:	4823      	ldr	r0, [pc, #140]	; (800067c <debounceUpdate+0xcc>)
 80005f0:	f000 f85d 	bl	80006ae <delayRead>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d035      	beq.n	8000666 <debounceUpdate+0xb6>
			if (BSP_PB_GetState(BUTTON_USER)) {
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 fa02 	bl	8000a04 <BSP_PB_GetState>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d004      	beq.n	8000610 <debounceUpdate+0x60>
				estadoActual = BUTTON_DOWN;
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <debounceUpdate+0xc8>)
 8000608:	2202      	movs	r2, #2
 800060a:	701a      	strb	r2, [r3, #0]
				return BUTTON_PRESSED;
 800060c:	2301      	movs	r3, #1
 800060e:	e030      	b.n	8000672 <debounceUpdate+0xc2>
			} else {
				estadoActual = BUTTON_UP;
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <debounceUpdate+0xc8>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
			}

		}

		break;
 8000616:	e026      	b.n	8000666 <debounceUpdate+0xb6>

	case BUTTON_DOWN: // Actualizar salida del estado
		if (!BSP_PB_GetState(BUTTON_USER)) {
 8000618:	2000      	movs	r0, #0
 800061a:	f000 f9f3 	bl	8000a04 <BSP_PB_GetState>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d122      	bne.n	800066a <debounceUpdate+0xba>
			delayRead(&tiempo);
 8000624:	4815      	ldr	r0, [pc, #84]	; (800067c <debounceUpdate+0xcc>)
 8000626:	f000 f842 	bl	80006ae <delayRead>
			estadoActual = BUTTON_RISING;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <debounceUpdate+0xc8>)
 800062c:	2203      	movs	r2, #3
 800062e:	701a      	strb	r2, [r3, #0]

		}
		break;
 8000630:	e01b      	b.n	800066a <debounceUpdate+0xba>

	case BUTTON_RISING:
		if (delayRead(&tiempo)) {
 8000632:	4812      	ldr	r0, [pc, #72]	; (800067c <debounceUpdate+0xcc>)
 8000634:	f000 f83b 	bl	80006ae <delayRead>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d017      	beq.n	800066e <debounceUpdate+0xbe>
			if (!BSP_PB_GetState(BUTTON_USER)) {
 800063e:	2000      	movs	r0, #0
 8000640:	f000 f9e0 	bl	8000a04 <BSP_PB_GetState>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d104      	bne.n	8000654 <debounceUpdate+0xa4>
				estadoActual = BUTTON_UP;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <debounceUpdate+0xc8>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
				return BUTTON_RELEASED;
 8000650:	2300      	movs	r3, #0
 8000652:	e00e      	b.n	8000672 <debounceUpdate+0xc2>

			} else {
				estadoActual = BUTTON_DOWN;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <debounceUpdate+0xc8>)
 8000656:	2202      	movs	r2, #2
 8000658:	701a      	strb	r2, [r3, #0]

			}

		}

		break;
 800065a:	e008      	b.n	800066e <debounceUpdate+0xbe>
	default:
		//Si algo modificó la variable estadoActual
		// a un estado no válido llevo la MEF a un
		// lugar seguro, por ejemplo, la reinicio:
		debounceInit();
 800065c:	f7ff ff94 	bl	8000588 <debounceInit>

		break;
 8000660:	e006      	b.n	8000670 <debounceUpdate+0xc0>
		break;
 8000662:	bf00      	nop
 8000664:	e004      	b.n	8000670 <debounceUpdate+0xc0>
		break;
 8000666:	bf00      	nop
 8000668:	e002      	b.n	8000670 <debounceUpdate+0xc0>
		break;
 800066a:	bf00      	nop
 800066c:	e000      	b.n	8000670 <debounceUpdate+0xc0>
		break;
 800066e:	bf00      	nop
	}
	return 0;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000009c 	.word	0x2000009c
 800067c:	200000a0 	.word	0x200000a0

08000680 <delayInit>:

void delayInit(delay_t *delay, tick_t duration);
bool_t delayRead(delay_t *delay);
void delayWrite(delay_t *delay,tick_t duration);

void delayInit(delay_t *delay, tick_t duration){
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
	if(duration>0){
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d008      	beq.n	80006a2 <delayInit+0x22>
		delay->duration =duration;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	605a      	str	r2, [r3, #4]
		delay->running = false;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	721a      	strb	r2, [r3, #8]
		delay->startTime=0;  //control de los parametros
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
	}
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <delayRead>:

bool_t delayRead(delay_t *delay){
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b084      	sub	sp, #16
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
	bool_t timeOk=false;
 80006b6:	2300      	movs	r3, #0
 80006b8:	73fb      	strb	r3, [r7, #15]

	if(delay->running){
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7a1b      	ldrb	r3, [r3, #8]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d010      	beq.n	80006e4 <delayRead+0x36>
		if(((tick_t)HAL_GetTick()-delay->startTime)>= delay->duration){
 80006c2:	f000 fab9 	bl	8000c38 <HAL_GetTick>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	1ad2      	subs	r2, r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d30e      	bcc.n	80006f6 <delayRead+0x48>
			timeOk=true;
 80006d8:	2301      	movs	r3, #1
 80006da:	73fb      	strb	r3, [r7, #15]
			delay->running = false;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	721a      	strb	r2, [r3, #8]
 80006e2:	e008      	b.n	80006f6 <delayRead+0x48>
		}
	}
	else{
		delay->startTime = (tick_t)HAL_GetTick();
 80006e4:	f000 faa8 	bl	8000c38 <HAL_GetTick>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
		delay->running = true;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2201      	movs	r2, #1
 80006f4:	721a      	strb	r2, [r3, #8]
	}

	return timeOk;
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MEFInit>:
static delay_t tiempo;


char buffer[20];

void MEFInit(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	debounceInit();
 8000704:	f7ff ff40 	bl	8000588 <debounceInit>
	delayInit(&tiempo, SAMPLE_TIME);
 8000708:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <MEFInit+0x1c>)
 800070e:	f7ff ffb7 	bl	8000680 <delayInit>
	estadoActual = MEDICION_FRECUENCIA;
 8000712:	4b03      	ldr	r3, [pc, #12]	; (8000720 <MEFInit+0x20>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000b0 	.word	0x200000b0
 8000720:	200000ac 	.word	0x200000ac

08000724 <estadoMEFUpdate>:

void estadoMEFUpdate(uint32_t frecuency) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]


	switch (estadoActual) {
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <estadoMEFUpdate+0x80>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d024      	beq.n	800077e <estadoMEFUpdate+0x5a>
 8000734:	2b02      	cmp	r3, #2
 8000736:	dc2e      	bgt.n	8000796 <estadoMEFUpdate+0x72>
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <estadoMEFUpdate+0x1e>
 800073c:	2b01      	cmp	r3, #1
 800073e:	d012      	beq.n	8000766 <estadoMEFUpdate+0x42>
		uartSendString((uint8_t *)buffer);
		estadoActual = MEDICION_FRECUENCIA;
		break;

	default:
		break;
 8000740:	e029      	b.n	8000796 <estadoMEFUpdate+0x72>
		if (delayRead(&tiempo)) {
 8000742:	4819      	ldr	r0, [pc, #100]	; (80007a8 <estadoMEFUpdate+0x84>)
 8000744:	f7ff ffb3 	bl	80006ae <delayRead>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <estadoMEFUpdate+0x30>
			estadoActual = FRECUENCIA_UART;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <estadoMEFUpdate+0x80>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
		if(BUTTON_FALLING == debounceUpdate()){
 8000754:	f7ff ff2c 	bl	80005b0 <debounceUpdate>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d11d      	bne.n	800079a <estadoMEFUpdate+0x76>
			estadoActual = ALMACENAMIENTO_FRECUENCIA;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <estadoMEFUpdate+0x80>)
 8000760:	2202      	movs	r2, #2
 8000762:	701a      	strb	r2, [r3, #0]
		break;
 8000764:	e019      	b.n	800079a <estadoMEFUpdate+0x76>
		sprintf(buffer, "frec=%ld \n\r",frecuency);
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	4910      	ldr	r1, [pc, #64]	; (80007ac <estadoMEFUpdate+0x88>)
 800076a:	4811      	ldr	r0, [pc, #68]	; (80007b0 <estadoMEFUpdate+0x8c>)
 800076c:	f002 fcdc 	bl	8003128 <siprintf>
		uartSendString((uint8_t *)buffer);
 8000770:	480f      	ldr	r0, [pc, #60]	; (80007b0 <estadoMEFUpdate+0x8c>)
 8000772:	f000 f869 	bl	8000848 <uartSendString>
		estadoActual = MEDICION_FRECUENCIA;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <estadoMEFUpdate+0x80>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		break;
 800077c:	e00e      	b.n	800079c <estadoMEFUpdate+0x78>
		sprintf(buffer, "store=%ld \n\r",frecuency);
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	490c      	ldr	r1, [pc, #48]	; (80007b4 <estadoMEFUpdate+0x90>)
 8000782:	480b      	ldr	r0, [pc, #44]	; (80007b0 <estadoMEFUpdate+0x8c>)
 8000784:	f002 fcd0 	bl	8003128 <siprintf>
		uartSendString((uint8_t *)buffer);
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <estadoMEFUpdate+0x8c>)
 800078a:	f000 f85d 	bl	8000848 <uartSendString>
		estadoActual = MEDICION_FRECUENCIA;
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <estadoMEFUpdate+0x80>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
		break;
 8000794:	e002      	b.n	800079c <estadoMEFUpdate+0x78>
		break;
 8000796:	bf00      	nop
 8000798:	e000      	b.n	800079c <estadoMEFUpdate+0x78>
		break;
 800079a:	bf00      	nop
	}
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000ac 	.word	0x200000ac
 80007a8:	200000b0 	.word	0x200000b0
 80007ac:	0800399c 	.word	0x0800399c
 80007b0:	20000120 	.word	0x20000120
 80007b4:	080039a8 	.word	0x080039a8

080007b8 <uartInit>:
 *      Author: emiliano
 */

#include <API_uart.h>

bool_t uartInit(){
 80007b8:	b5b0      	push	{r4, r5, r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0

	bool_t EstadoUart;

	uint8_t miString[] = "BaudRate = 9600; StopBits = 1; Parity=NONE \n\r";
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <uartInit+0x84>)
 80007c0:	463c      	mov	r4, r7
 80007c2:	461d      	mov	r5, r3
 80007c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007d0:	c407      	stmia	r4!, {r0, r1, r2}
 80007d2:	8023      	strh	r3, [r4, #0]
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <uartInit+0x88>)
 80007d6:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <uartInit+0x8c>)
 80007d8:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = 9600;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <uartInit+0x88>)
 80007dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007e0:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <uartInit+0x88>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <uartInit+0x88>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <uartInit+0x88>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <uartInit+0x88>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <uartInit+0x88>)
 80007fc:	220c      	movs	r2, #12
 80007fe:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <uartInit+0x88>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000806:	480e      	ldr	r0, [pc, #56]	; (8000840 <uartInit+0x88>)
 8000808:	f001 fffb 	bl	8002802 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d003      	beq.n	800081a <uartInit+0x62>
	  {
		  EstadoUart = false;
 8000812:	2300      	movs	r3, #0
 8000814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000818:	e009      	b.n	800082e <uartInit+0x76>
	  }	else {
		  EstadoUart = true;
 800081a:	2301      	movs	r3, #1
 800081c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		  HAL_UART_Transmit(&UartHandle, (uint8_t *) miString, sizeof(miString)/sizeof(char), 1000);
 8000820:	4639      	mov	r1, r7
 8000822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000826:	222e      	movs	r2, #46	; 0x2e
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <uartInit+0x88>)
 800082a:	f002 f837 	bl	800289c <HAL_UART_Transmit>
	  }

	  return EstadoUart;
 800082e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 8000832:	4618      	mov	r0, r3
 8000834:	3730      	adds	r7, #48	; 0x30
 8000836:	46bd      	mov	sp, r7
 8000838:	bdb0      	pop	{r4, r5, r7, pc}
 800083a:	bf00      	nop
 800083c:	080039b8 	.word	0x080039b8
 8000840:	200000dc 	.word	0x200000dc
 8000844:	40004800 	.word	0x40004800

08000848 <uartSendString>:

void uartSendString(uint8_t *pstring){
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

	uint8_t largo=0;
 8000850:	2300      	movs	r3, #0
 8000852:	73fb      	strb	r3, [r7, #15]

	while(*(pstring+largo) != 0) largo++;
 8000854:	e002      	b.n	800085c <uartSendString+0x14>
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	3301      	adds	r3, #1
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f6      	bne.n	8000856 <uartSendString+0xe>


	HAL_UART_Transmit(&UartHandle, pstring, largo, 1000);
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	b29a      	uxth	r2, r3
 800086c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	4803      	ldr	r0, [pc, #12]	; (8000880 <uartSendString+0x38>)
 8000874:	f002 f812 	bl	800289c <HAL_UART_Transmit>

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000dc 	.word	0x200000dc

08000884 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d10e      	bne.n	80008b2 <BSP_LED_Init+0x2e>
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <BSP_LED_Init+0x94>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a1e      	ldr	r2, [pc, #120]	; (8000918 <BSP_LED_Init+0x94>)
 800089e:	f043 0302 	orr.w	r3, r3, #2
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <BSP_LED_Init+0x94>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 0302 	and.w	r3, r3, #2
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	e00d      	b.n	80008ce <BSP_LED_Init+0x4a>
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <BSP_LED_Init+0x94>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <BSP_LED_Init+0x94>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <BSP_LED_Init+0x94>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <BSP_LED_Init+0x98>)
 80008d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <BSP_LED_Init+0x9c>)
 80008e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ec:	f107 0214 	add.w	r2, r7, #20
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fabe 	bl	8000e74 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4a09      	ldr	r2, [pc, #36]	; (8000920 <BSP_LED_Init+0x9c>)
 80008fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4a06      	ldr	r2, [pc, #24]	; (800091c <BSP_LED_Init+0x98>)
 8000904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	f000 fc76 	bl	80011fc <HAL_GPIO_WritePin>
}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	080039e8 	.word	0x080039e8
 8000920:	20000000 	.word	0x20000000

08000924 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <BSP_LED_On+0x2c>)
 8000932:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <BSP_LED_On+0x30>)
 800093a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800093e:	2201      	movs	r2, #1
 8000940:	4619      	mov	r1, r3
 8000942:	f000 fc5b 	bl	80011fc <HAL_GPIO_WritePin>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000000 	.word	0x20000000
 8000954:	080039e8 	.word	0x080039e8

08000958 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <BSP_PB_Init+0xa4>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	4a22      	ldr	r2, [pc, #136]	; (80009fc <BSP_PB_Init+0xa4>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6313      	str	r3, [r2, #48]	; 0x30
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <BSP_PB_Init+0xa4>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d112      	bne.n	80009b0 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800098a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000994:	2302      	movs	r3, #2
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000998:	2302      	movs	r3, #2
 800099a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <BSP_PB_Init+0xa8>)
 80009a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a4:	f107 020c 	add.w	r2, r7, #12
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fa62 	bl	8000e74 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80009b0:	79bb      	ldrb	r3, [r7, #6]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d11d      	bne.n	80009f2 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80009b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 80009c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009c4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <BSP_PB_Init+0xa8>)
 80009ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ce:	f107 020c 	add.w	r2, r7, #12
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 fa4d 	bl	8000e74 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80009da:	2328      	movs	r3, #40	; 0x28
 80009dc:	b25b      	sxtb	r3, r3
 80009de:	2200      	movs	r2, #0
 80009e0:	210f      	movs	r1, #15
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fa0f 	bl	8000e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80009e8:	2328      	movs	r3, #40	; 0x28
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fa26 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	2000000c 	.word	0x2000000c

08000a04 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <BSP_PB_GetState+0x28>)
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 fbd5 	bl	80011cc <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000000c 	.word	0x2000000c

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <SystemInit+0x60>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <SystemInit+0x60>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <SystemInit+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <SystemInit+0x64>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <SystemInit+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <SystemInit+0x64>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <SystemInit+0x64>)
 8000a5c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <SystemInit+0x64>)
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <SystemInit+0x68>)
 8000a6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <SystemInit+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <SystemInit+0x64>)
 8000a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <SystemInit+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SystemInit+0x60>)
 8000a80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a84:	609a      	str	r2, [r3, #8]
#endif
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00
 8000a94:	40023800 	.word	0x40023800
 8000a98:	24003010 	.word	0x24003010

08000a9c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000af0:	f000 f88e 	bl	8000c10 <HAL_IncTick>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <TIM3_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <TIM3_IRQHandler+0x10>)
 8000afe:	f001 fa6d 	bl	8001fdc <HAL_TIM_IRQHandler>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000138 	.word	0x20000138

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f002 faca 	bl	80030d4 <__errno>
 8000b40:	4603      	mov	r3, r0
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20030000 	.word	0x20030000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	200000bc 	.word	0x200000bc
 8000b74:	200001a0 	.word	0x200001a0

08000b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_Init+0x34>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_Init+0x34>)
 8000b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b86:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_Init+0x34>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_Init+0x34>)
 8000b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f92b 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f000 f808 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f000 fbd8 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023c00 	.word	0x40023c00

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x54>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x58>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f943 	bl	8000e5a <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00e      	b.n	8000bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d80a      	bhi.n	8000bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 f90b 	bl	8000e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <HAL_InitTick+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000010 	.word	0x20000010
 8000c08:	20000018 	.word	0x20000018
 8000c0c:	20000014 	.word	0x20000014

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000018 	.word	0x20000018
 8000c34:	20000134 	.word	0x20000134

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000134 	.word	0x20000134

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd0:	f7ff ff8e 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff29 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff3e 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff8e 	bl	8000d44 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5d 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff31 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa2 	bl	8000dac <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	e177      	b.n	8001180 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	f040 8166 	bne.w	800117a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d005      	beq.n	8000ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d130      	bne.n	8000f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	f003 0201 	and.w	r2, r3, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d017      	beq.n	8000f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d123      	bne.n	8000fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	691a      	ldr	r2, [r3, #16]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	08da      	lsrs	r2, r3, #3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3208      	adds	r2, #8
 8000fb2:	69b9      	ldr	r1, [r7, #24]
 8000fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0203 	and.w	r2, r3, #3
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80c0 	beq.w	800117a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b66      	ldr	r3, [pc, #408]	; (8001198 <HAL_GPIO_Init+0x324>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a65      	ldr	r2, [pc, #404]	; (8001198 <HAL_GPIO_Init+0x324>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b63      	ldr	r3, [pc, #396]	; (8001198 <HAL_GPIO_Init+0x324>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001016:	4a61      	ldr	r2, [pc, #388]	; (800119c <HAL_GPIO_Init+0x328>)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a58      	ldr	r2, [pc, #352]	; (80011a0 <HAL_GPIO_Init+0x32c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d037      	beq.n	80010b2 <HAL_GPIO_Init+0x23e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a57      	ldr	r2, [pc, #348]	; (80011a4 <HAL_GPIO_Init+0x330>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d031      	beq.n	80010ae <HAL_GPIO_Init+0x23a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a56      	ldr	r2, [pc, #344]	; (80011a8 <HAL_GPIO_Init+0x334>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d02b      	beq.n	80010aa <HAL_GPIO_Init+0x236>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a55      	ldr	r2, [pc, #340]	; (80011ac <HAL_GPIO_Init+0x338>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d025      	beq.n	80010a6 <HAL_GPIO_Init+0x232>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a54      	ldr	r2, [pc, #336]	; (80011b0 <HAL_GPIO_Init+0x33c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d01f      	beq.n	80010a2 <HAL_GPIO_Init+0x22e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a53      	ldr	r2, [pc, #332]	; (80011b4 <HAL_GPIO_Init+0x340>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d019      	beq.n	800109e <HAL_GPIO_Init+0x22a>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a52      	ldr	r2, [pc, #328]	; (80011b8 <HAL_GPIO_Init+0x344>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x226>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a51      	ldr	r2, [pc, #324]	; (80011bc <HAL_GPIO_Init+0x348>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x222>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a50      	ldr	r2, [pc, #320]	; (80011c0 <HAL_GPIO_Init+0x34c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x21e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4f      	ldr	r2, [pc, #316]	; (80011c4 <HAL_GPIO_Init+0x350>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x21a>
 800108a:	2309      	movs	r3, #9
 800108c:	e012      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 800108e:	230a      	movs	r3, #10
 8001090:	e010      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 8001092:	2308      	movs	r3, #8
 8001094:	e00e      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 8001096:	2307      	movs	r3, #7
 8001098:	e00c      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 800109a:	2306      	movs	r3, #6
 800109c:	e00a      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 800109e:	2305      	movs	r3, #5
 80010a0:	e008      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010a2:	2304      	movs	r3, #4
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010a6:	2303      	movs	r3, #3
 80010a8:	e004      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010b2:	2300      	movs	r3, #0
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	f002 0203 	and.w	r2, r2, #3
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4093      	lsls	r3, r2
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c4:	4935      	ldr	r1, [pc, #212]	; (800119c <HAL_GPIO_Init+0x328>)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d2:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <HAL_GPIO_Init+0x354>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f6:	4a34      	ldr	r2, [pc, #208]	; (80011c8 <HAL_GPIO_Init+0x354>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010fc:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <HAL_GPIO_Init+0x354>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001120:	4a29      	ldr	r2, [pc, #164]	; (80011c8 <HAL_GPIO_Init+0x354>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <HAL_GPIO_Init+0x354>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114a:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <HAL_GPIO_Init+0x354>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_GPIO_Init+0x354>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <HAL_GPIO_Init+0x354>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3301      	adds	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	f67f ae84 	bls.w	8000e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40013800 	.word	0x40013800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40020800 	.word	0x40020800
 80011ac:	40020c00 	.word	0x40020c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40021400 	.word	0x40021400
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40021c00 	.word	0x40021c00
 80011c0:	40022000 	.word	0x40022000
 80011c4:	40022400 	.word	0x40022400
 80011c8:	40013c00 	.word	0x40013c00

080011cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	4013      	ands	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e001      	b.n	80011ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001218:	e003      	b.n	8001222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	041a      	lsls	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_UART_MspInit+0x9c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a22      	ldr	r2, [pc, #136]	; (80012cc <HAL_UART_MspInit+0x9c>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_UART_MspInit+0x9c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_UART_MspInit+0x9c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <HAL_UART_MspInit+0x9c>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_UART_MspInit+0x9c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_UART_MspInit+0x9c>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <HAL_UART_MspInit+0x9c>)
 800127a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127e:	6413      	str	r3, [r2, #64]	; 0x40
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_UART_MspInit+0x9c>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800128c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001296:	2301      	movs	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800129e:	2307      	movs	r3, #7
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4809      	ldr	r0, [pc, #36]	; (80012d0 <HAL_UART_MspInit+0xa0>)
 80012aa:	f7ff fde3 	bl	8000e74 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80012ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80012b4:	2307      	movs	r3, #7
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4804      	ldr	r0, [pc, #16]	; (80012d0 <HAL_UART_MspInit+0xa0>)
 80012c0:	f7ff fdd8 	bl	8000e74 <HAL_GPIO_Init>
}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	; 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020c00 	.word	0x40020c00

080012d4 <HAL_TIM_IC_MspInit>:

}


void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_TIM_IC_MspInit+0x78>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_TIM_IC_MspInit+0x78>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	6413      	str	r3, [r2, #64]	; 0x40
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_TIM_IC_MspInit+0x78>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIO channels Clock */
  TIMx_CHANNEL_GPIO_PORT();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_TIM_IC_MspInit+0x78>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	4a12      	ldr	r2, [pc, #72]	; (800134c <HAL_TIM_IC_MspInit+0x78>)
 8001302:	f043 0302 	orr.w	r3, r3, #2
 8001306:	6313      	str	r3, [r2, #48]	; 0x30
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_TIM_IC_MspInit+0x78>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]

  /* Configure  (TIMx_Channel) in Alternate function, push-pull and high speed */
  GPIO_InitStruct.Pin = TIMx_GPIO_PIN_CHANNEL2;
 8001314:	2320      	movs	r3, #32
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800131c:	2301      	movs	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = TIMx_GPIO_AF_TIMx;
 8001324:	2302      	movs	r3, #2
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIMx_GPIO_PORT, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4808      	ldr	r0, [pc, #32]	; (8001350 <HAL_TIM_IC_MspInit+0x7c>)
 8001330:	f7ff fda0 	bl	8000e74 <HAL_GPIO_Init>

  /*##-2- Configure the NVIC for TIMx #########################################*/

  HAL_NVIC_SetPriority(TIMx_IRQn, 0, 1);
 8001334:	2201      	movs	r2, #1
 8001336:	2100      	movs	r1, #0
 8001338:	201d      	movs	r0, #29
 800133a:	f7ff fd64 	bl	8000e06 <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 800133e:	201d      	movs	r0, #29
 8001340:	f7ff fd7d 	bl	8000e3e <HAL_NVIC_EnableIRQ>
}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	40020400 	.word	0x40020400

08001354 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a1f      	ldr	r2, [pc, #124]	; (80013f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001390:	f7ff fc52 	bl	8000c38 <HAL_GetTick>
 8001394:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001396:	e009      	b.n	80013ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001398:	f7ff fc4e 	bl	8000c38 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013a6:	d901      	bls.n	80013ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e01f      	b.n	80013ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_PWREx_EnableOverDrive+0x98>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b8:	d1ee      	bne.n	8001398 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c0:	f7ff fc3a 	bl	8000c38 <HAL_GetTick>
 80013c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013c6:	e009      	b.n	80013dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013c8:	f7ff fc36 	bl	8000c38 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013d6:	d901      	bls.n	80013dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e007      	b.n	80013ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <HAL_PWREx_EnableOverDrive+0x98>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013e8:	d1ee      	bne.n	80013c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	420e0040 	.word	0x420e0040
 80013fc:	40007000 	.word	0x40007000
 8001400:	420e0044 	.word	0x420e0044

08001404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e264      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d075      	beq.n	800150e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001422:	4ba3      	ldr	r3, [pc, #652]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b04      	cmp	r3, #4
 800142c:	d00c      	beq.n	8001448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142e:	4ba0      	ldr	r3, [pc, #640]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001436:	2b08      	cmp	r3, #8
 8001438:	d112      	bne.n	8001460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143a:	4b9d      	ldr	r3, [pc, #628]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001446:	d10b      	bne.n	8001460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	4b99      	ldr	r3, [pc, #612]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d05b      	beq.n	800150c <HAL_RCC_OscConfig+0x108>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d157      	bne.n	800150c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e23f      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d106      	bne.n	8001478 <HAL_RCC_OscConfig+0x74>
 800146a:	4b91      	ldr	r3, [pc, #580]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a90      	ldr	r2, [pc, #576]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01d      	b.n	80014b4 <HAL_RCC_OscConfig+0xb0>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x98>
 8001482:	4b8b      	ldr	r3, [pc, #556]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a8a      	ldr	r2, [pc, #552]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a87      	ldr	r2, [pc, #540]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xb0>
 800149c:	4b84      	ldr	r3, [pc, #528]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a83      	ldr	r2, [pc, #524]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a80      	ldr	r2, [pc, #512]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fbbc 	bl	8000c38 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fbb8 	bl	8000c38 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	; 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e204      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b76      	ldr	r3, [pc, #472]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0xc0>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fba8 	bl	8000c38 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fba4 	bl	8000c38 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1f0      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	4b6c      	ldr	r3, [pc, #432]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0xe8>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d063      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151a:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001526:	4b62      	ldr	r3, [pc, #392]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800152e:	2b08      	cmp	r3, #8
 8001530:	d11c      	bne.n	800156c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001532:	4b5f      	ldr	r3, [pc, #380]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	4b5c      	ldr	r3, [pc, #368]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x152>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e1c4      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4952      	ldr	r1, [pc, #328]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e03a      	b.n	80015e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b4f      	ldr	r3, [pc, #316]	; (80016b4 <HAL_RCC_OscConfig+0x2b0>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fb5d 	bl	8000c38 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fb59 	bl	8000c38 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e1a5      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4940      	ldr	r1, [pc, #256]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <HAL_RCC_OscConfig+0x2b0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fb3c 	bl	8000c38 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fb38 	bl	8000c38 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e184      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d030      	beq.n	8001650 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d016      	beq.n	8001624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <HAL_RCC_OscConfig+0x2b4>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fb1c 	bl	8000c38 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fb18 	bl	8000c38 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e164      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x200>
 8001622:	e015      	b.n	8001650 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <HAL_RCC_OscConfig+0x2b4>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff fb05 	bl	8000c38 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001632:	f7ff fb01 	bl	8000c38 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e14d      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80a0 	beq.w	800179e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10f      	bne.n	800168e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168a:	2301      	movs	r3, #1
 800168c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_RCC_OscConfig+0x2b8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d121      	bne.n	80016de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_RCC_OscConfig+0x2b8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a07      	ldr	r2, [pc, #28]	; (80016bc <HAL_RCC_OscConfig+0x2b8>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a6:	f7ff fac7 	bl	8000c38 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ac:	e011      	b.n	80016d2 <HAL_RCC_OscConfig+0x2ce>
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	42470000 	.word	0x42470000
 80016b8:	42470e80 	.word	0x42470e80
 80016bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c0:	f7ff faba 	bl	8000c38 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e106      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	4b85      	ldr	r3, [pc, #532]	; (80018e8 <HAL_RCC_OscConfig+0x4e4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d106      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
 80016e6:	4b81      	ldr	r3, [pc, #516]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	4a80      	ldr	r2, [pc, #512]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6713      	str	r3, [r2, #112]	; 0x70
 80016f2:	e01c      	b.n	800172e <HAL_RCC_OscConfig+0x32a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x312>
 80016fc:	4b7b      	ldr	r3, [pc, #492]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	4a7a      	ldr	r2, [pc, #488]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6713      	str	r3, [r2, #112]	; 0x70
 8001708:	4b78      	ldr	r3, [pc, #480]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	4a77      	ldr	r2, [pc, #476]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
 8001714:	e00b      	b.n	800172e <HAL_RCC_OscConfig+0x32a>
 8001716:	4b75      	ldr	r3, [pc, #468]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171a:	4a74      	ldr	r2, [pc, #464]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6713      	str	r3, [r2, #112]	; 0x70
 8001722:	4b72      	ldr	r3, [pc, #456]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	4a71      	ldr	r2, [pc, #452]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d015      	beq.n	8001762 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001736:	f7ff fa7f 	bl	8000c38 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff fa7b 	bl	8000c38 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	; 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0c5      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	4b65      	ldr	r3, [pc, #404]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ee      	beq.n	800173e <HAL_RCC_OscConfig+0x33a>
 8001760:	e014      	b.n	800178c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff fa69 	bl	8000c38 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff fa65 	bl	8000c38 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e0af      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	4b5a      	ldr	r3, [pc, #360]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1ee      	bne.n	800176a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d105      	bne.n	800179e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001792:	4b56      	ldr	r3, [pc, #344]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a55      	ldr	r2, [pc, #340]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 8001798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 809b 	beq.w	80018de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017a8:	4b50      	ldr	r3, [pc, #320]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d05c      	beq.n	800186e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d141      	bne.n	8001840 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017bc:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x4ec>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fa39 	bl	8000c38 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fa35 	bl	8000c38 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e081      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017dc:	4b43      	ldr	r3, [pc, #268]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69da      	ldr	r2, [r3, #28]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	019b      	lsls	r3, r3, #6
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	085b      	lsrs	r3, r3, #1
 8001800:	3b01      	subs	r3, #1
 8001802:	041b      	lsls	r3, r3, #16
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	061b      	lsls	r3, r3, #24
 800180c:	4937      	ldr	r1, [pc, #220]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_RCC_OscConfig+0x4ec>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fa0e 	bl	8000c38 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff fa0a 	bl	8000c38 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e056      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x41c>
 800183e:	e04e      	b.n	80018de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_RCC_OscConfig+0x4ec>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff f9f7 	bl	8000c38 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff f9f3 	bl	8000c38 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e03f      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f0      	bne.n	800184e <HAL_RCC_OscConfig+0x44a>
 800186c:	e037      	b.n	80018de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e032      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_RCC_OscConfig+0x4e8>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d028      	beq.n	80018da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d121      	bne.n	80018da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d11a      	bne.n	80018da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018aa:	4013      	ands	r3, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d111      	bne.n	80018da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	3b01      	subs	r3, #1
 80018c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d107      	bne.n	80018da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d001      	beq.n	80018de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40007000 	.word	0x40007000
 80018ec:	40023800 	.word	0x40023800
 80018f0:	42470060 	.word	0x42470060

080018f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0cc      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d90c      	bls.n	8001930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b65      	ldr	r3, [pc, #404]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b63      	ldr	r3, [pc, #396]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0b8      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001948:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001960:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a52      	ldr	r2, [pc, #328]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800196a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	494d      	ldr	r1, [pc, #308]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d044      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d119      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e07f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e067      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f023 0203 	bic.w	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4934      	ldr	r1, [pc, #208]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e4:	f7ff f928 	bl	8000c38 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7ff f924 	bl	8000c38 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e04f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 020c 	and.w	r2, r3, #12
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1eb      	bne.n	80019ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d20c      	bcs.n	8001a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e032      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4916      	ldr	r1, [pc, #88]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	490e      	ldr	r1, [pc, #56]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a7a:	f000 f821 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	490a      	ldr	r1, [pc, #40]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	5ccb      	ldrb	r3, [r1, r3]
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f888 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	080039f0 	.word	0x080039f0
 8001ab8:	20000010 	.word	0x20000010
 8001abc:	20000014 	.word	0x20000014

08001ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad8:	4b67      	ldr	r3, [pc, #412]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d00d      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x40>
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	f200 80bd 	bhi.w	8001c64 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x34>
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0x3a>
 8001af2:	e0b7      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001af4:	4b61      	ldr	r3, [pc, #388]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001af6:	60bb      	str	r3, [r7, #8]
       break;
 8001af8:	e0b7      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001afa:	4b61      	ldr	r3, [pc, #388]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001afc:	60bb      	str	r3, [r7, #8]
      break;
 8001afe:	e0b4      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b00:	4b5d      	ldr	r3, [pc, #372]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b0a:	4b5b      	ldr	r3, [pc, #364]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d04d      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b16:	4b58      	ldr	r3, [pc, #352]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b26:	f04f 0100 	mov.w	r1, #0
 8001b2a:	ea02 0800 	and.w	r8, r2, r0
 8001b2e:	ea03 0901 	and.w	r9, r3, r1
 8001b32:	4640      	mov	r0, r8
 8001b34:	4649      	mov	r1, r9
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	014b      	lsls	r3, r1, #5
 8001b40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b44:	0142      	lsls	r2, r0, #5
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	ebb0 0008 	subs.w	r0, r0, r8
 8001b4e:	eb61 0109 	sbc.w	r1, r1, r9
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	018b      	lsls	r3, r1, #6
 8001b5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b60:	0182      	lsls	r2, r0, #6
 8001b62:	1a12      	subs	r2, r2, r0
 8001b64:	eb63 0301 	sbc.w	r3, r3, r1
 8001b68:	f04f 0000 	mov.w	r0, #0
 8001b6c:	f04f 0100 	mov.w	r1, #0
 8001b70:	00d9      	lsls	r1, r3, #3
 8001b72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b76:	00d0      	lsls	r0, r2, #3
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	eb12 0208 	adds.w	r2, r2, r8
 8001b80:	eb43 0309 	adc.w	r3, r3, r9
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	f04f 0100 	mov.w	r1, #0
 8001b8c:	0259      	lsls	r1, r3, #9
 8001b8e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b92:	0250      	lsls	r0, r2, #9
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	f7fe fb74 	bl	8000290 <__aeabi_uldivmod>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4613      	mov	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	e04a      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	099b      	lsrs	r3, r3, #6
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bc2:	f04f 0100 	mov.w	r1, #0
 8001bc6:	ea02 0400 	and.w	r4, r2, r0
 8001bca:	ea03 0501 	and.w	r5, r3, r1
 8001bce:	4620      	mov	r0, r4
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	014b      	lsls	r3, r1, #5
 8001bdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001be0:	0142      	lsls	r2, r0, #5
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	1b00      	subs	r0, r0, r4
 8001be8:	eb61 0105 	sbc.w	r1, r1, r5
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	018b      	lsls	r3, r1, #6
 8001bf6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bfa:	0182      	lsls	r2, r0, #6
 8001bfc:	1a12      	subs	r2, r2, r0
 8001bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8001c02:	f04f 0000 	mov.w	r0, #0
 8001c06:	f04f 0100 	mov.w	r1, #0
 8001c0a:	00d9      	lsls	r1, r3, #3
 8001c0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c10:	00d0      	lsls	r0, r2, #3
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	1912      	adds	r2, r2, r4
 8001c18:	eb45 0303 	adc.w	r3, r5, r3
 8001c1c:	f04f 0000 	mov.w	r0, #0
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	0299      	lsls	r1, r3, #10
 8001c26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c2a:	0290      	lsls	r0, r2, #10
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	461a      	mov	r2, r3
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	f7fe fb28 	bl	8000290 <__aeabi_uldivmod>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4613      	mov	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	0c1b      	lsrs	r3, r3, #16
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	3301      	adds	r3, #1
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	60bb      	str	r3, [r7, #8]
      break;
 8001c62:	e002      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c66:	60bb      	str	r3, [r7, #8]
      break;
 8001c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	00f42400 	.word	0x00f42400
 8001c80:	007a1200 	.word	0x007a1200

08001c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000010 	.word	0x20000010

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca0:	f7ff fff0 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	0a9b      	lsrs	r3, r3, #10
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4903      	ldr	r1, [pc, #12]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	08003a00 	.word	0x08003a00

08001cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cc8:	f7ff ffdc 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0b5b      	lsrs	r3, r3, #13
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4903      	ldr	r1, [pc, #12]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	08003a00 	.word	0x08003a00

08001cec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e041      	b.n	8001d82 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fade 	bl	80012d4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3304      	adds	r3, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f000 fb66 	bl	80023fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d104      	bne.n	8001daa <HAL_TIM_IC_Start_IT+0x1e>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	e013      	b.n	8001dd2 <HAL_TIM_IC_Start_IT+0x46>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d104      	bne.n	8001dba <HAL_TIM_IC_Start_IT+0x2e>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	e00b      	b.n	8001dd2 <HAL_TIM_IC_Start_IT+0x46>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d104      	bne.n	8001dca <HAL_TIM_IC_Start_IT+0x3e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	e003      	b.n	8001dd2 <HAL_TIM_IC_Start_IT+0x46>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d104      	bne.n	8001de4 <HAL_TIM_IC_Start_IT+0x58>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e013      	b.n	8001e0c <HAL_TIM_IC_Start_IT+0x80>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d104      	bne.n	8001df4 <HAL_TIM_IC_Start_IT+0x68>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	e00b      	b.n	8001e0c <HAL_TIM_IC_Start_IT+0x80>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d104      	bne.n	8001e04 <HAL_TIM_IC_Start_IT+0x78>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	e003      	b.n	8001e0c <HAL_TIM_IC_Start_IT+0x80>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e0e:	7bbb      	ldrb	r3, [r7, #14]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d102      	bne.n	8001e1a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001e14:	7b7b      	ldrb	r3, [r7, #13]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d001      	beq.n	8001e1e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0cc      	b.n	8001fb8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d104      	bne.n	8001e2e <HAL_TIM_IC_Start_IT+0xa2>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e2c:	e013      	b.n	8001e56 <HAL_TIM_IC_Start_IT+0xca>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d104      	bne.n	8001e3e <HAL_TIM_IC_Start_IT+0xb2>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e3c:	e00b      	b.n	8001e56 <HAL_TIM_IC_Start_IT+0xca>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d104      	bne.n	8001e4e <HAL_TIM_IC_Start_IT+0xc2>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e4c:	e003      	b.n	8001e56 <HAL_TIM_IC_Start_IT+0xca>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d104      	bne.n	8001e66 <HAL_TIM_IC_Start_IT+0xda>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e64:	e013      	b.n	8001e8e <HAL_TIM_IC_Start_IT+0x102>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d104      	bne.n	8001e76 <HAL_TIM_IC_Start_IT+0xea>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e74:	e00b      	b.n	8001e8e <HAL_TIM_IC_Start_IT+0x102>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d104      	bne.n	8001e86 <HAL_TIM_IC_Start_IT+0xfa>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e84:	e003      	b.n	8001e8e <HAL_TIM_IC_Start_IT+0x102>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b0c      	cmp	r3, #12
 8001e92:	d841      	bhi.n	8001f18 <HAL_TIM_IC_Start_IT+0x18c>
 8001e94:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <HAL_TIM_IC_Start_IT+0x110>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001ed1 	.word	0x08001ed1
 8001ea0:	08001f19 	.word	0x08001f19
 8001ea4:	08001f19 	.word	0x08001f19
 8001ea8:	08001f19 	.word	0x08001f19
 8001eac:	08001ee3 	.word	0x08001ee3
 8001eb0:	08001f19 	.word	0x08001f19
 8001eb4:	08001f19 	.word	0x08001f19
 8001eb8:	08001f19 	.word	0x08001f19
 8001ebc:	08001ef5 	.word	0x08001ef5
 8001ec0:	08001f19 	.word	0x08001f19
 8001ec4:	08001f19 	.word	0x08001f19
 8001ec8:	08001f19 	.word	0x08001f19
 8001ecc:	08001f07 	.word	0x08001f07
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0202 	orr.w	r2, r2, #2
 8001ede:	60da      	str	r2, [r3, #12]
      break;
 8001ee0:	e01d      	b.n	8001f1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0204 	orr.w	r2, r2, #4
 8001ef0:	60da      	str	r2, [r3, #12]
      break;
 8001ef2:	e014      	b.n	8001f1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0208 	orr.w	r2, r2, #8
 8001f02:	60da      	str	r2, [r3, #12]
      break;
 8001f04:	e00b      	b.n	8001f1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0210 	orr.w	r2, r2, #16
 8001f14:	60da      	str	r2, [r3, #12]
      break;
 8001f16:	e002      	b.n	8001f1e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d148      	bne.n	8001fb6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fc2f 	bl	8002790 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_TIM_IC_Start_IT+0x234>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d022      	beq.n	8001f82 <HAL_TIM_IC_Start_IT+0x1f6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f44:	d01d      	beq.n	8001f82 <HAL_TIM_IC_Start_IT+0x1f6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_TIM_IC_Start_IT+0x238>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d018      	beq.n	8001f82 <HAL_TIM_IC_Start_IT+0x1f6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1c      	ldr	r2, [pc, #112]	; (8001fc8 <HAL_TIM_IC_Start_IT+0x23c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <HAL_TIM_IC_Start_IT+0x1f6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <HAL_TIM_IC_Start_IT+0x240>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00e      	beq.n	8001f82 <HAL_TIM_IC_Start_IT+0x1f6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <HAL_TIM_IC_Start_IT+0x244>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d009      	beq.n	8001f82 <HAL_TIM_IC_Start_IT+0x1f6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <HAL_TIM_IC_Start_IT+0x248>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d004      	beq.n	8001f82 <HAL_TIM_IC_Start_IT+0x1f6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a16      	ldr	r2, [pc, #88]	; (8001fd8 <HAL_TIM_IC_Start_IT+0x24c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d111      	bne.n	8001fa6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b06      	cmp	r3, #6
 8001f92:	d010      	beq.n	8001fb6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa4:	e007      	b.n	8001fb6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0201 	orr.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40000800 	.word	0x40000800
 8001fcc:	40000c00 	.word	0x40000c00
 8001fd0:	40010400 	.word	0x40010400
 8001fd4:	40014000 	.word	0x40014000
 8001fd8:	40001800 	.word	0x40001800

08001fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d122      	bne.n	8002038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d11b      	bne.n	8002038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0202 	mvn.w	r2, #2
 8002008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 ff6c 	bl	8002efc <HAL_TIM_IC_CaptureCallback>
 8002024:	e005      	b.n	8002032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f9ca 	bl	80023c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f9d1 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b04      	cmp	r3, #4
 8002044:	d122      	bne.n	800208c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b04      	cmp	r3, #4
 8002052:	d11b      	bne.n	800208c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0204 	mvn.w	r2, #4
 800205c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2202      	movs	r2, #2
 8002062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 ff42 	bl	8002efc <HAL_TIM_IC_CaptureCallback>
 8002078:	e005      	b.n	8002086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f9a0 	bl	80023c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f9a7 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b08      	cmp	r3, #8
 8002098:	d122      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d11b      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0208 	mvn.w	r2, #8
 80020b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2204      	movs	r2, #4
 80020b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 ff18 	bl	8002efc <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f976 	bl	80023c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f97d 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d122      	bne.n	8002134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d11b      	bne.n	8002134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0210 	mvn.w	r2, #16
 8002104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2208      	movs	r2, #8
 800210a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 feee 	bl	8002efc <HAL_TIM_IC_CaptureCallback>
 8002120:	e005      	b.n	800212e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f94c 	bl	80023c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f953 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d107      	bne.n	8002160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0201 	mvn.w	r2, #1
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f926 	bl	80023ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	2b80      	cmp	r3, #128	; 0x80
 800216c:	d10e      	bne.n	800218c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002178:	2b80      	cmp	r3, #128	; 0x80
 800217a:	d107      	bne.n	800218c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fb31 	bl	80027ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d10e      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d107      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f918 	bl	80023e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d10e      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d107      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0220 	mvn.w	r2, #32
 80021dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 fafb 	bl	80027da <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002206:	2302      	movs	r3, #2
 8002208:	e088      	b.n	800231c <HAL_TIM_IC_ConfigChannel+0x130>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d11b      	bne.n	8002250 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f000 f988 	bl	800253c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 020c 	bic.w	r2, r2, #12
 800223a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6999      	ldr	r1, [r3, #24]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	619a      	str	r2, [r3, #24]
 800224e:	e060      	b.n	8002312 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d11c      	bne.n	8002290 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	6819      	ldr	r1, [r3, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f000 f9dd 	bl	8002624 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002278:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6999      	ldr	r1, [r3, #24]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	021a      	lsls	r2, r3, #8
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	619a      	str	r2, [r3, #24]
 800228e:	e040      	b.n	8002312 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b08      	cmp	r3, #8
 8002294:	d11b      	bne.n	80022ce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f000 f9fa 	bl	800269e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 020c 	bic.w	r2, r2, #12
 80022b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69d9      	ldr	r1, [r3, #28]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	61da      	str	r2, [r3, #28]
 80022cc:	e021      	b.n	8002312 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	d11c      	bne.n	800230e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	6819      	ldr	r1, [r3, #0]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f000 fa17 	bl	8002716 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80022f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69d9      	ldr	r1, [r3, #28]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	021a      	lsls	r2, r3, #8
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	61da      	str	r2, [r3, #28]
 800230c:	e001      	b.n	8002312 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800231a:	7dfb      	ldrb	r3, [r7, #23]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b0c      	cmp	r3, #12
 8002336:	d831      	bhi.n	800239c <HAL_TIM_ReadCapturedValue+0x78>
 8002338:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <HAL_TIM_ReadCapturedValue+0x1c>)
 800233a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233e:	bf00      	nop
 8002340:	08002375 	.word	0x08002375
 8002344:	0800239d 	.word	0x0800239d
 8002348:	0800239d 	.word	0x0800239d
 800234c:	0800239d 	.word	0x0800239d
 8002350:	0800237f 	.word	0x0800237f
 8002354:	0800239d 	.word	0x0800239d
 8002358:	0800239d 	.word	0x0800239d
 800235c:	0800239d 	.word	0x0800239d
 8002360:	08002389 	.word	0x08002389
 8002364:	0800239d 	.word	0x0800239d
 8002368:	0800239d 	.word	0x0800239d
 800236c:	0800239d 	.word	0x0800239d
 8002370:	08002393 	.word	0x08002393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237a:	60fb      	str	r3, [r7, #12]

      break;
 800237c:	e00f      	b.n	800239e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002384:	60fb      	str	r3, [r7, #12]

      break;
 8002386:	e00a      	b.n	800239e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	60fb      	str	r3, [r7, #12]

      break;
 8002390:	e005      	b.n	800239e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	60fb      	str	r3, [r7, #12]

      break;
 800239a:	e000      	b.n	800239e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800239c:	bf00      	nop
  }

  return tmpreg;
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a40      	ldr	r2, [pc, #256]	; (8002510 <TIM_Base_SetConfig+0x114>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241a:	d00f      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a3d      	ldr	r2, [pc, #244]	; (8002514 <TIM_Base_SetConfig+0x118>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00b      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a3c      	ldr	r2, [pc, #240]	; (8002518 <TIM_Base_SetConfig+0x11c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d007      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a3b      	ldr	r2, [pc, #236]	; (800251c <TIM_Base_SetConfig+0x120>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d003      	beq.n	800243c <TIM_Base_SetConfig+0x40>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a3a      	ldr	r2, [pc, #232]	; (8002520 <TIM_Base_SetConfig+0x124>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d108      	bne.n	800244e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a2f      	ldr	r2, [pc, #188]	; (8002510 <TIM_Base_SetConfig+0x114>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d02b      	beq.n	80024ae <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d027      	beq.n	80024ae <TIM_Base_SetConfig+0xb2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a2c      	ldr	r2, [pc, #176]	; (8002514 <TIM_Base_SetConfig+0x118>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d023      	beq.n	80024ae <TIM_Base_SetConfig+0xb2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a2b      	ldr	r2, [pc, #172]	; (8002518 <TIM_Base_SetConfig+0x11c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01f      	beq.n	80024ae <TIM_Base_SetConfig+0xb2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a2a      	ldr	r2, [pc, #168]	; (800251c <TIM_Base_SetConfig+0x120>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d01b      	beq.n	80024ae <TIM_Base_SetConfig+0xb2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a29      	ldr	r2, [pc, #164]	; (8002520 <TIM_Base_SetConfig+0x124>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d017      	beq.n	80024ae <TIM_Base_SetConfig+0xb2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a28      	ldr	r2, [pc, #160]	; (8002524 <TIM_Base_SetConfig+0x128>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <TIM_Base_SetConfig+0xb2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a27      	ldr	r2, [pc, #156]	; (8002528 <TIM_Base_SetConfig+0x12c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00f      	beq.n	80024ae <TIM_Base_SetConfig+0xb2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a26      	ldr	r2, [pc, #152]	; (800252c <TIM_Base_SetConfig+0x130>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00b      	beq.n	80024ae <TIM_Base_SetConfig+0xb2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a25      	ldr	r2, [pc, #148]	; (8002530 <TIM_Base_SetConfig+0x134>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d007      	beq.n	80024ae <TIM_Base_SetConfig+0xb2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a24      	ldr	r2, [pc, #144]	; (8002534 <TIM_Base_SetConfig+0x138>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d003      	beq.n	80024ae <TIM_Base_SetConfig+0xb2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a23      	ldr	r2, [pc, #140]	; (8002538 <TIM_Base_SetConfig+0x13c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d108      	bne.n	80024c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <TIM_Base_SetConfig+0x114>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d003      	beq.n	80024f4 <TIM_Base_SetConfig+0xf8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <TIM_Base_SetConfig+0x124>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d103      	bne.n	80024fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	615a      	str	r2, [r3, #20]
}
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40010000 	.word	0x40010000
 8002514:	40000400 	.word	0x40000400
 8002518:	40000800 	.word	0x40000800
 800251c:	40000c00 	.word	0x40000c00
 8002520:	40010400 	.word	0x40010400
 8002524:	40014000 	.word	0x40014000
 8002528:	40014400 	.word	0x40014400
 800252c:	40014800 	.word	0x40014800
 8002530:	40001800 	.word	0x40001800
 8002534:	40001c00 	.word	0x40001c00
 8002538:	40002000 	.word	0x40002000

0800253c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	f023 0201 	bic.w	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a28      	ldr	r2, [pc, #160]	; (8002608 <TIM_TI1_SetConfig+0xcc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d01b      	beq.n	80025a2 <TIM_TI1_SetConfig+0x66>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002570:	d017      	beq.n	80025a2 <TIM_TI1_SetConfig+0x66>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4a25      	ldr	r2, [pc, #148]	; (800260c <TIM_TI1_SetConfig+0xd0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d013      	beq.n	80025a2 <TIM_TI1_SetConfig+0x66>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4a24      	ldr	r2, [pc, #144]	; (8002610 <TIM_TI1_SetConfig+0xd4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00f      	beq.n	80025a2 <TIM_TI1_SetConfig+0x66>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4a23      	ldr	r2, [pc, #140]	; (8002614 <TIM_TI1_SetConfig+0xd8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00b      	beq.n	80025a2 <TIM_TI1_SetConfig+0x66>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a22      	ldr	r2, [pc, #136]	; (8002618 <TIM_TI1_SetConfig+0xdc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <TIM_TI1_SetConfig+0x66>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4a21      	ldr	r2, [pc, #132]	; (800261c <TIM_TI1_SetConfig+0xe0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d003      	beq.n	80025a2 <TIM_TI1_SetConfig+0x66>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a20      	ldr	r2, [pc, #128]	; (8002620 <TIM_TI1_SetConfig+0xe4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d101      	bne.n	80025a6 <TIM_TI1_SetConfig+0x6a>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <TIM_TI1_SetConfig+0x6c>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e003      	b.n	80025c6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f023 030a 	bic.w	r3, r3, #10
 80025e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f003 030a 	and.w	r3, r3, #10
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	621a      	str	r2, [r3, #32]
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40010000 	.word	0x40010000
 800260c:	40000400 	.word	0x40000400
 8002610:	40000800 	.word	0x40000800
 8002614:	40000c00 	.word	0x40000c00
 8002618:	40010400 	.word	0x40010400
 800261c:	40014000 	.word	0x40014000
 8002620:	40001800 	.word	0x40001800

08002624 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	f023 0210 	bic.w	r2, r3, #16
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002662:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	031b      	lsls	r3, r3, #12
 8002668:	b29b      	uxth	r3, r3
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002676:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	621a      	str	r2, [r3, #32]
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800269e:	b480      	push	{r7}
 80026a0:	b087      	sub	sp, #28
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f023 0303 	bic.w	r3, r3, #3
 80026ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80026ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	621a      	str	r2, [r3, #32]
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002716:	b480      	push	{r7}
 8002718:	b087      	sub	sp, #28
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002742:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002754:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	031b      	lsls	r3, r3, #12
 800275a:	b29b      	uxth	r3, r3
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002768:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	031b      	lsls	r3, r3, #12
 800276e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	621a      	str	r2, [r3, #32]
}
 8002784:	bf00      	nop
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2201      	movs	r2, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a1a      	ldr	r2, [r3, #32]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	401a      	ands	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a1a      	ldr	r2, [r3, #32]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	431a      	orrs	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	621a      	str	r2, [r3, #32]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e03f      	b.n	8002894 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7fe fd01 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2224      	movs	r2, #36	; 0x24
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002844:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f928 	bl	8002a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800285a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800286a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800287a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d17c      	bne.n	80029b6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_UART_Transmit+0x2c>
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e075      	b.n	80029b8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_UART_Transmit+0x3e>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e06e      	b.n	80029b8 <HAL_UART_Transmit+0x11c>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2221      	movs	r2, #33	; 0x21
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028f0:	f7fe f9a2 	bl	8000c38 <HAL_GetTick>
 80028f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	88fa      	ldrh	r2, [r7, #6]
 8002900:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290a:	d108      	bne.n	800291e <HAL_UART_Transmit+0x82>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d104      	bne.n	800291e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	61bb      	str	r3, [r7, #24]
 800291c:	e003      	b.n	8002926 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800292e:	e02a      	b.n	8002986 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2200      	movs	r2, #0
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f840 	bl	80029c0 <UART_WaitOnFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e036      	b.n	80029b8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10b      	bne.n	8002968 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800295e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	3302      	adds	r3, #2
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	e007      	b.n	8002978 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	781a      	ldrb	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3301      	adds	r3, #1
 8002976:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1cf      	bne.n	8002930 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2200      	movs	r2, #0
 8002998:	2140      	movs	r1, #64	; 0x40
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f810 	bl	80029c0 <UART_WaitOnFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e006      	b.n	80029b8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
  }
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b090      	sub	sp, #64	; 0x40
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d0:	e050      	b.n	8002a74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029d8:	d04c      	beq.n	8002a74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80029e0:	f7fe f92a 	bl	8000c38 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d241      	bcs.n	8002a74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a10:	637a      	str	r2, [r7, #52]	; 0x34
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e5      	bne.n	80029f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3314      	adds	r3, #20
 8002a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	e853 3f00 	ldrex	r3, [r3]
 8002a32:	613b      	str	r3, [r7, #16]
   return(result);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3314      	adds	r3, #20
 8002a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a44:	623a      	str	r2, [r7, #32]
 8002a46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a48:	69f9      	ldr	r1, [r7, #28]
 8002a4a:	6a3a      	ldr	r2, [r7, #32]
 8002a4c:	e841 2300 	strex	r3, r2, [r1]
 8002a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e5      	bne.n	8002a24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e00f      	b.n	8002a94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d09f      	beq.n	80029d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3740      	adds	r7, #64	; 0x40
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa0:	b09f      	sub	sp, #124	; 0x7c
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab2:	68d9      	ldr	r1, [r3, #12]
 8002ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	ea40 0301 	orr.w	r3, r0, r1
 8002abc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ae0:	f021 010c 	bic.w	r1, r1, #12
 8002ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aea:	430b      	orrs	r3, r1
 8002aec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afa:	6999      	ldr	r1, [r3, #24]
 8002afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	ea40 0301 	orr.w	r3, r0, r1
 8002b04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4bc5      	ldr	r3, [pc, #788]	; (8002e20 <UART_SetConfig+0x384>)
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d004      	beq.n	8002b1a <UART_SetConfig+0x7e>
 8002b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4bc3      	ldr	r3, [pc, #780]	; (8002e24 <UART_SetConfig+0x388>)
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d103      	bne.n	8002b22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b1a:	f7ff f8d3 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 8002b1e:	6778      	str	r0, [r7, #116]	; 0x74
 8002b20:	e002      	b.n	8002b28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b22:	f7ff f8bb 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8002b26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b30:	f040 80b6 	bne.w	8002ca0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b36:	461c      	mov	r4, r3
 8002b38:	f04f 0500 	mov.w	r5, #0
 8002b3c:	4622      	mov	r2, r4
 8002b3e:	462b      	mov	r3, r5
 8002b40:	1891      	adds	r1, r2, r2
 8002b42:	6439      	str	r1, [r7, #64]	; 0x40
 8002b44:	415b      	adcs	r3, r3
 8002b46:	647b      	str	r3, [r7, #68]	; 0x44
 8002b48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b4c:	1912      	adds	r2, r2, r4
 8002b4e:	eb45 0303 	adc.w	r3, r5, r3
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	00d9      	lsls	r1, r3, #3
 8002b5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b60:	00d0      	lsls	r0, r2, #3
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	1911      	adds	r1, r2, r4
 8002b68:	6639      	str	r1, [r7, #96]	; 0x60
 8002b6a:	416b      	adcs	r3, r5
 8002b6c:	667b      	str	r3, [r7, #100]	; 0x64
 8002b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	461a      	mov	r2, r3
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	1891      	adds	r1, r2, r2
 8002b7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b7c:	415b      	adcs	r3, r3
 8002b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002b88:	f7fd fb82 	bl	8000290 <__aeabi_uldivmod>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4ba5      	ldr	r3, [pc, #660]	; (8002e28 <UART_SetConfig+0x38c>)
 8002b92:	fba3 2302 	umull	r2, r3, r3, r2
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	011e      	lsls	r6, r3, #4
 8002b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b9c:	461c      	mov	r4, r3
 8002b9e:	f04f 0500 	mov.w	r5, #0
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	1891      	adds	r1, r2, r2
 8002ba8:	6339      	str	r1, [r7, #48]	; 0x30
 8002baa:	415b      	adcs	r3, r3
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
 8002bae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bb2:	1912      	adds	r2, r2, r4
 8002bb4:	eb45 0303 	adc.w	r3, r5, r3
 8002bb8:	f04f 0000 	mov.w	r0, #0
 8002bbc:	f04f 0100 	mov.w	r1, #0
 8002bc0:	00d9      	lsls	r1, r3, #3
 8002bc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bc6:	00d0      	lsls	r0, r2, #3
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	1911      	adds	r1, r2, r4
 8002bce:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bd0:	416b      	adcs	r3, r5
 8002bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	1891      	adds	r1, r2, r2
 8002be0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002be2:	415b      	adcs	r3, r3
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002bee:	f7fd fb4f 	bl	8000290 <__aeabi_uldivmod>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4b8c      	ldr	r3, [pc, #560]	; (8002e28 <UART_SetConfig+0x38c>)
 8002bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bfc:	095b      	lsrs	r3, r3, #5
 8002bfe:	2164      	movs	r1, #100	; 0x64
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	3332      	adds	r3, #50	; 0x32
 8002c0a:	4a87      	ldr	r2, [pc, #540]	; (8002e28 <UART_SetConfig+0x38c>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c18:	441e      	add	r6, r3
 8002c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f04f 0100 	mov.w	r1, #0
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	1894      	adds	r4, r2, r2
 8002c28:	623c      	str	r4, [r7, #32]
 8002c2a:	415b      	adcs	r3, r3
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c32:	1812      	adds	r2, r2, r0
 8002c34:	eb41 0303 	adc.w	r3, r1, r3
 8002c38:	f04f 0400 	mov.w	r4, #0
 8002c3c:	f04f 0500 	mov.w	r5, #0
 8002c40:	00dd      	lsls	r5, r3, #3
 8002c42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c46:	00d4      	lsls	r4, r2, #3
 8002c48:	4622      	mov	r2, r4
 8002c4a:	462b      	mov	r3, r5
 8002c4c:	1814      	adds	r4, r2, r0
 8002c4e:	653c      	str	r4, [r7, #80]	; 0x50
 8002c50:	414b      	adcs	r3, r1
 8002c52:	657b      	str	r3, [r7, #84]	; 0x54
 8002c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	1891      	adds	r1, r2, r2
 8002c60:	61b9      	str	r1, [r7, #24]
 8002c62:	415b      	adcs	r3, r3
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002c6e:	f7fd fb0f 	bl	8000290 <__aeabi_uldivmod>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4b6c      	ldr	r3, [pc, #432]	; (8002e28 <UART_SetConfig+0x38c>)
 8002c78:	fba3 1302 	umull	r1, r3, r3, r2
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	2164      	movs	r1, #100	; 0x64
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	3332      	adds	r3, #50	; 0x32
 8002c8a:	4a67      	ldr	r2, [pc, #412]	; (8002e28 <UART_SetConfig+0x38c>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	f003 0207 	and.w	r2, r3, #7
 8002c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4432      	add	r2, r6
 8002c9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c9e:	e0b9      	b.n	8002e14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca2:	461c      	mov	r4, r3
 8002ca4:	f04f 0500 	mov.w	r5, #0
 8002ca8:	4622      	mov	r2, r4
 8002caa:	462b      	mov	r3, r5
 8002cac:	1891      	adds	r1, r2, r2
 8002cae:	6139      	str	r1, [r7, #16]
 8002cb0:	415b      	adcs	r3, r3
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cb8:	1912      	adds	r2, r2, r4
 8002cba:	eb45 0303 	adc.w	r3, r5, r3
 8002cbe:	f04f 0000 	mov.w	r0, #0
 8002cc2:	f04f 0100 	mov.w	r1, #0
 8002cc6:	00d9      	lsls	r1, r3, #3
 8002cc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ccc:	00d0      	lsls	r0, r2, #3
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	eb12 0804 	adds.w	r8, r2, r4
 8002cd6:	eb43 0905 	adc.w	r9, r3, r5
 8002cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f04f 0100 	mov.w	r1, #0
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	008b      	lsls	r3, r1, #2
 8002cee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002cf2:	0082      	lsls	r2, r0, #2
 8002cf4:	4640      	mov	r0, r8
 8002cf6:	4649      	mov	r1, r9
 8002cf8:	f7fd faca 	bl	8000290 <__aeabi_uldivmod>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <UART_SetConfig+0x38c>)
 8002d02:	fba3 2302 	umull	r2, r3, r3, r2
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	011e      	lsls	r6, r3, #4
 8002d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f04f 0100 	mov.w	r1, #0
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	1894      	adds	r4, r2, r2
 8002d18:	60bc      	str	r4, [r7, #8]
 8002d1a:	415b      	adcs	r3, r3
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d22:	1812      	adds	r2, r2, r0
 8002d24:	eb41 0303 	adc.w	r3, r1, r3
 8002d28:	f04f 0400 	mov.w	r4, #0
 8002d2c:	f04f 0500 	mov.w	r5, #0
 8002d30:	00dd      	lsls	r5, r3, #3
 8002d32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d36:	00d4      	lsls	r4, r2, #3
 8002d38:	4622      	mov	r2, r4
 8002d3a:	462b      	mov	r3, r5
 8002d3c:	1814      	adds	r4, r2, r0
 8002d3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002d40:	414b      	adcs	r3, r1
 8002d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f04f 0100 	mov.w	r1, #0
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	008b      	lsls	r3, r1, #2
 8002d58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d5c:	0082      	lsls	r2, r0, #2
 8002d5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002d62:	f7fd fa95 	bl	8000290 <__aeabi_uldivmod>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <UART_SetConfig+0x38c>)
 8002d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	2164      	movs	r1, #100	; 0x64
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	3332      	adds	r3, #50	; 0x32
 8002d7e:	4a2a      	ldr	r2, [pc, #168]	; (8002e28 <UART_SetConfig+0x38c>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d8a:	441e      	add	r6, r3
 8002d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	1894      	adds	r4, r2, r2
 8002d9a:	603c      	str	r4, [r7, #0]
 8002d9c:	415b      	adcs	r3, r3
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002da4:	1812      	adds	r2, r2, r0
 8002da6:	eb41 0303 	adc.w	r3, r1, r3
 8002daa:	f04f 0400 	mov.w	r4, #0
 8002dae:	f04f 0500 	mov.w	r5, #0
 8002db2:	00dd      	lsls	r5, r3, #3
 8002db4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002db8:	00d4      	lsls	r4, r2, #3
 8002dba:	4622      	mov	r2, r4
 8002dbc:	462b      	mov	r3, r5
 8002dbe:	eb12 0a00 	adds.w	sl, r2, r0
 8002dc2:	eb43 0b01 	adc.w	fp, r3, r1
 8002dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f04f 0100 	mov.w	r1, #0
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	008b      	lsls	r3, r1, #2
 8002dda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002dde:	0082      	lsls	r2, r0, #2
 8002de0:	4650      	mov	r0, sl
 8002de2:	4659      	mov	r1, fp
 8002de4:	f7fd fa54 	bl	8000290 <__aeabi_uldivmod>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <UART_SetConfig+0x38c>)
 8002dee:	fba3 1302 	umull	r1, r3, r3, r2
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	2164      	movs	r1, #100	; 0x64
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	3332      	adds	r3, #50	; 0x32
 8002e00:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <UART_SetConfig+0x38c>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	f003 020f 	and.w	r2, r3, #15
 8002e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4432      	add	r2, r6
 8002e12:	609a      	str	r2, [r3, #8]
}
 8002e14:	bf00      	nop
 8002e16:	377c      	adds	r7, #124	; 0x7c
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e1e:	bf00      	nop
 8002e20:	40011000 	.word	0x40011000
 8002e24:	40011400 	.word	0x40011400
 8002e28:	51eb851f 	.word	0x51eb851f

08002e2c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */


  HAL_Init();
 8002e30:	f7fd fea2 	bl	8000b78 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8002e34:	f000 f8ca 	bl	8002fcc <SystemClock_Config>

  /* Configure LED2 */

  BSP_LED_Init(LED1);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fd fd23 	bl	8000884 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f7fd fd20 	bl	8000884 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8002e44:	2002      	movs	r0, #2
 8002e46:	f7fd fd1d 	bl	8000884 <BSP_LED_Init>


  if(uartInit()){
 8002e4a:	f7fd fcb5 	bl	80007b8 <uartInit>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <main+0x30>
    	BSP_LED_On(LED1); // Correcta la inicializacion
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7fd fd65 	bl	8000924 <BSP_LED_On>
 8002e5a:	e002      	b.n	8002e62 <main+0x36>
     } else {
    	  BSP_LED_On(LED3);
 8002e5c:	2002      	movs	r0, #2
 8002e5e:	f7fd fd61 	bl	8000924 <BSP_LED_On>
     The Rising edge is used as active edge,
     The TIM3 CCR2 is used to compute the frequency value
  ------------------------------------------------------------ */

  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8002e62:	4b22      	ldr	r3, [pc, #136]	; (8002eec <main+0xc0>)
 8002e64:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <main+0xc4>)
 8002e66:	601a      	str	r2, [r3, #0]
       + Period = 0xFFFF
       + Prescaler = 0
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period            = 0xFFFF;
 8002e68:	4b20      	ldr	r3, [pc, #128]	; (8002eec <main+0xc0>)
 8002e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e6e:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler         = 180;
 8002e70:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <main+0xc0>)
 8002e72:	22b4      	movs	r2, #180	; 0xb4
 8002e74:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision     = 0;
 8002e76:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <main+0xc0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <main+0xc0>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  TimHandle.Init.RepetitionCounter = 0;
 8002e82:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <main+0xc0>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	615a      	str	r2, [r3, #20]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e88:	4b18      	ldr	r3, [pc, #96]	; (8002eec <main+0xc0>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_IC_Init(&TimHandle) != HAL_OK)
 8002e8e:	4817      	ldr	r0, [pc, #92]	; (8002eec <main+0xc0>)
 8002e90:	f7fe ff2c 	bl	8001cec <HAL_TIM_IC_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <main+0x72>
  {
    /* Initialization Error */
    Error_Handler();
 8002e9a:	f000 f8eb 	bl	8003074 <Error_Handler>
  }

  /*##-2- Configure the Input Capture channel ################################*/
  /* Configure the Input Capture of channel 2 */
  sICConfig.ICPolarity  = TIM_ICPOLARITY_RISING;
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <main+0xc8>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
  sICConfig.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ea4:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <main+0xc8>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	605a      	str	r2, [r3, #4]
  sICConfig.ICPrescaler = TIM_ICPSC_DIV1;
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <main+0xc8>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
  sICConfig.ICFilter    = 0;
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <main+0xc8>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60da      	str	r2, [r3, #12]
  if(HAL_TIM_IC_ConfigChannel(&TimHandle, &sICConfig, TIM_CHANNEL_2) != HAL_OK)
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	490e      	ldr	r1, [pc, #56]	; (8002ef4 <main+0xc8>)
 8002eba:	480c      	ldr	r0, [pc, #48]	; (8002eec <main+0xc0>)
 8002ebc:	f7ff f996 	bl	80021ec <HAL_TIM_IC_ConfigChannel>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <main+0x9e>
  {
    /* Configuration Error */
    Error_Handler();
 8002ec6:	f000 f8d5 	bl	8003074 <Error_Handler>
  }

  /*##-3- Start the Input Capture in interrupt mode ##########################*/
  if(HAL_TIM_IC_Start_IT(&TimHandle, TIM_CHANNEL_2) != HAL_OK)
 8002eca:	2104      	movs	r1, #4
 8002ecc:	4807      	ldr	r0, [pc, #28]	; (8002eec <main+0xc0>)
 8002ece:	f7fe ff5d 	bl	8001d8c <HAL_TIM_IC_Start_IT>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <main+0xb0>
  {
    /* Starting Error */
    Error_Handler();
 8002ed8:	f000 f8cc 	bl	8003074 <Error_Handler>
  }

  MEFInit();
 8002edc:	f7fd fc10 	bl	8000700 <MEFInit>

  while (1)
  {

	 estadoMEFUpdate(uwFrequency);
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <main+0xcc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fd fc1d 	bl	8000724 <estadoMEFUpdate>
 8002eea:	e7f9      	b.n	8002ee0 <main+0xb4>
 8002eec:	20000138 	.word	0x20000138
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	20000180 	.word	0x20000180
 8002ef8:	200000d0 	.word	0x200000d0

08002efc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Conversion complete callback in non blocking mode
  * @param  htim : hadc handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	7f1b      	ldrb	r3, [r3, #28]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d14f      	bne.n	8002fac <HAL_TIM_IC_CaptureCallback+0xb0>
  {
    if(uhCaptureIndex == 0)
 8002f0c:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <HAL_TIM_IC_CaptureCallback+0x2e>
    {
      /* Get the 1st Input Capture value */
      uwIC2Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002f14:	2104      	movs	r1, #4
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fa04 	bl	8002324 <HAL_TIM_ReadCapturedValue>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002f20:	6013      	str	r3, [r2, #0]
      uhCaptureIndex = 1;
 8002f22:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	801a      	strh	r2, [r3, #0]
      uwFrequency = (2*HAL_RCC_GetPCLK1Freq()) / uwDiffCapture;
      uwFrequency = uwFrequency /180;
      uhCaptureIndex = 0;
    }
  }
}
 8002f28:	e040      	b.n	8002fac <HAL_TIM_IC_CaptureCallback+0xb0>
    else if(uhCaptureIndex == 1)
 8002f2a:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d13c      	bne.n	8002fac <HAL_TIM_IC_CaptureCallback+0xb0>
      uwIC2Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002f32:	2104      	movs	r1, #4
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff f9f5 	bl	8002324 <HAL_TIM_ReadCapturedValue>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002f3e:	6013      	str	r3, [r2, #0]
      if (uwIC2Value2 > uwIC2Value1)
 8002f40:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d907      	bls.n	8002f5c <HAL_TIM_IC_CaptureCallback+0x60>
        uwDiffCapture = (uwIC2Value2 - uwIC2Value1);
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	4a1a      	ldr	r2, [pc, #104]	; (8002fc0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e011      	b.n	8002f80 <HAL_TIM_IC_CaptureCallback+0x84>
      else if (uwIC2Value2 < uwIC2Value1)
 8002f5c:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d209      	bcs.n	8002f7c <HAL_TIM_IC_CaptureCallback+0x80>
        uwDiffCapture = ((0xFFFF - uwIC2Value1) + uwIC2Value2) + 1;
 8002f68:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e001      	b.n	8002f80 <HAL_TIM_IC_CaptureCallback+0x84>
        Error_Handler();
 8002f7c:	f000 f87a 	bl	8003074 <Error_Handler>
      uwFrequency = (2*HAL_RCC_GetPCLK1Freq()) / uwDiffCapture;
 8002f80:	f7fe fe8c 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8002f84:	4603      	mov	r3, r0
 8002f86:	005a      	lsls	r2, r3, #1
 8002f88:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	4a0c      	ldr	r2, [pc, #48]	; (8002fc4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002f92:	6013      	str	r3, [r2, #0]
      uwFrequency = uwFrequency /180;
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	089b      	lsrs	r3, r3, #2
 8002f9a:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002fa4:	6013      	str	r3, [r2, #0]
      uhCaptureIndex = 0;
 8002fa6:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	801a      	strh	r2, [r3, #0]
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	200000cc 	.word	0x200000cc
 8002fb8:	200000c0 	.word	0x200000c0
 8002fbc:	200000c4 	.word	0x200000c4
 8002fc0:	200000c8 	.word	0x200000c8
 8002fc4:	200000d0 	.word	0x200000d0
 8002fc8:	16c16c17 	.word	0x16c16c17

08002fcc <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b094      	sub	sp, #80	; 0x50
 8002fd0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	4b25      	ldr	r3, [pc, #148]	; (800306c <SystemClock_Config+0xa0>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a24      	ldr	r2, [pc, #144]	; (800306c <SystemClock_Config+0xa0>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <SystemClock_Config+0xa0>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <SystemClock_Config+0xa4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <SystemClock_Config+0xa4>)
 8002ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <SystemClock_Config+0xa4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800300a:	2301      	movs	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800300e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003012:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003014:	2302      	movs	r3, #2
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003018:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 800301e:	2308      	movs	r3, #8
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8003022:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003028:	2302      	movs	r3, #2
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800302c:	2307      	movs	r3, #7
 800302e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003030:	f107 030c 	add.w	r3, r7, #12
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe f9e5 	bl	8001404 <HAL_RCC_OscConfig>

  /* Activate the Over-Drive mode */
  HAL_PWREx_EnableOverDrive();
 800303a:	f7fe f993 	bl	8001364 <HAL_PWREx_EnableOverDrive>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800303e:	230f      	movs	r3, #15
 8003040:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003042:	2302      	movs	r3, #2
 8003044:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003046:	2300      	movs	r3, #0
 8003048:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800304a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800304e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8003050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003054:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003056:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800305a:	2105      	movs	r1, #5
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe fc49 	bl	80018f4 <HAL_RCC_ClockConfig>
}
 8003062:	bf00      	nop
 8003064:	3750      	adds	r7, #80	; 0x50
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	40007000 	.word	0x40007000

08003074 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8003078:	2001      	movs	r0, #1
 800307a:	f7fd fc53 	bl	8000924 <BSP_LED_On>
  while (1)
 800307e:	e7fe      	b.n	800307e <Error_Handler+0xa>

08003080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030b8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003084:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003086:	e003      	b.n	8003090 <LoopCopyDataInit>

08003088 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800308a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800308c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800308e:	3104      	adds	r1, #4

08003090 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003090:	480b      	ldr	r0, [pc, #44]	; (80030c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003092:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003094:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003096:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003098:	d3f6      	bcc.n	8003088 <CopyDataInit>
  ldr  r2, =_sbss
 800309a:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800309c:	e002      	b.n	80030a4 <LoopFillZerobss>

0800309e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800309e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030a0:	f842 3b04 	str.w	r3, [r2], #4

080030a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030a8:	d3f9      	bcc.n	800309e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030aa:	f7fd fcc1 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ae:	f000 f817 	bl	80030e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030b2:	f7ff febb 	bl	8002e2c <main>
  bx  lr    
 80030b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80030b8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80030bc:	08003a4c 	.word	0x08003a4c
  ldr  r0, =_sdata
 80030c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030c4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80030c8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80030cc:	200001a0 	.word	0x200001a0

080030d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030d0:	e7fe      	b.n	80030d0 <ADC_IRQHandler>
	...

080030d4 <__errno>:
 80030d4:	4b01      	ldr	r3, [pc, #4]	; (80030dc <__errno+0x8>)
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	2000001c 	.word	0x2000001c

080030e0 <__libc_init_array>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	4d0d      	ldr	r5, [pc, #52]	; (8003118 <__libc_init_array+0x38>)
 80030e4:	4c0d      	ldr	r4, [pc, #52]	; (800311c <__libc_init_array+0x3c>)
 80030e6:	1b64      	subs	r4, r4, r5
 80030e8:	10a4      	asrs	r4, r4, #2
 80030ea:	2600      	movs	r6, #0
 80030ec:	42a6      	cmp	r6, r4
 80030ee:	d109      	bne.n	8003104 <__libc_init_array+0x24>
 80030f0:	4d0b      	ldr	r5, [pc, #44]	; (8003120 <__libc_init_array+0x40>)
 80030f2:	4c0c      	ldr	r4, [pc, #48]	; (8003124 <__libc_init_array+0x44>)
 80030f4:	f000 fc46 	bl	8003984 <_init>
 80030f8:	1b64      	subs	r4, r4, r5
 80030fa:	10a4      	asrs	r4, r4, #2
 80030fc:	2600      	movs	r6, #0
 80030fe:	42a6      	cmp	r6, r4
 8003100:	d105      	bne.n	800310e <__libc_init_array+0x2e>
 8003102:	bd70      	pop	{r4, r5, r6, pc}
 8003104:	f855 3b04 	ldr.w	r3, [r5], #4
 8003108:	4798      	blx	r3
 800310a:	3601      	adds	r6, #1
 800310c:	e7ee      	b.n	80030ec <__libc_init_array+0xc>
 800310e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003112:	4798      	blx	r3
 8003114:	3601      	adds	r6, #1
 8003116:	e7f2      	b.n	80030fe <__libc_init_array+0x1e>
 8003118:	08003a44 	.word	0x08003a44
 800311c:	08003a44 	.word	0x08003a44
 8003120:	08003a44 	.word	0x08003a44
 8003124:	08003a48 	.word	0x08003a48

08003128 <siprintf>:
 8003128:	b40e      	push	{r1, r2, r3}
 800312a:	b500      	push	{lr}
 800312c:	b09c      	sub	sp, #112	; 0x70
 800312e:	ab1d      	add	r3, sp, #116	; 0x74
 8003130:	9002      	str	r0, [sp, #8]
 8003132:	9006      	str	r0, [sp, #24]
 8003134:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003138:	4809      	ldr	r0, [pc, #36]	; (8003160 <siprintf+0x38>)
 800313a:	9107      	str	r1, [sp, #28]
 800313c:	9104      	str	r1, [sp, #16]
 800313e:	4909      	ldr	r1, [pc, #36]	; (8003164 <siprintf+0x3c>)
 8003140:	f853 2b04 	ldr.w	r2, [r3], #4
 8003144:	9105      	str	r1, [sp, #20]
 8003146:	6800      	ldr	r0, [r0, #0]
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	a902      	add	r1, sp, #8
 800314c:	f000 f868 	bl	8003220 <_svfiprintf_r>
 8003150:	9b02      	ldr	r3, [sp, #8]
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	b01c      	add	sp, #112	; 0x70
 8003158:	f85d eb04 	ldr.w	lr, [sp], #4
 800315c:	b003      	add	sp, #12
 800315e:	4770      	bx	lr
 8003160:	2000001c 	.word	0x2000001c
 8003164:	ffff0208 	.word	0xffff0208

08003168 <__ssputs_r>:
 8003168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800316c:	688e      	ldr	r6, [r1, #8]
 800316e:	429e      	cmp	r6, r3
 8003170:	4682      	mov	sl, r0
 8003172:	460c      	mov	r4, r1
 8003174:	4690      	mov	r8, r2
 8003176:	461f      	mov	r7, r3
 8003178:	d838      	bhi.n	80031ec <__ssputs_r+0x84>
 800317a:	898a      	ldrh	r2, [r1, #12]
 800317c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003180:	d032      	beq.n	80031e8 <__ssputs_r+0x80>
 8003182:	6825      	ldr	r5, [r4, #0]
 8003184:	6909      	ldr	r1, [r1, #16]
 8003186:	eba5 0901 	sub.w	r9, r5, r1
 800318a:	6965      	ldr	r5, [r4, #20]
 800318c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003190:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003194:	3301      	adds	r3, #1
 8003196:	444b      	add	r3, r9
 8003198:	106d      	asrs	r5, r5, #1
 800319a:	429d      	cmp	r5, r3
 800319c:	bf38      	it	cc
 800319e:	461d      	movcc	r5, r3
 80031a0:	0553      	lsls	r3, r2, #21
 80031a2:	d531      	bpl.n	8003208 <__ssputs_r+0xa0>
 80031a4:	4629      	mov	r1, r5
 80031a6:	f000 fb47 	bl	8003838 <_malloc_r>
 80031aa:	4606      	mov	r6, r0
 80031ac:	b950      	cbnz	r0, 80031c4 <__ssputs_r+0x5c>
 80031ae:	230c      	movs	r3, #12
 80031b0:	f8ca 3000 	str.w	r3, [sl]
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ba:	81a3      	strh	r3, [r4, #12]
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c4:	6921      	ldr	r1, [r4, #16]
 80031c6:	464a      	mov	r2, r9
 80031c8:	f000 fabe 	bl	8003748 <memcpy>
 80031cc:	89a3      	ldrh	r3, [r4, #12]
 80031ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d6:	81a3      	strh	r3, [r4, #12]
 80031d8:	6126      	str	r6, [r4, #16]
 80031da:	6165      	str	r5, [r4, #20]
 80031dc:	444e      	add	r6, r9
 80031de:	eba5 0509 	sub.w	r5, r5, r9
 80031e2:	6026      	str	r6, [r4, #0]
 80031e4:	60a5      	str	r5, [r4, #8]
 80031e6:	463e      	mov	r6, r7
 80031e8:	42be      	cmp	r6, r7
 80031ea:	d900      	bls.n	80031ee <__ssputs_r+0x86>
 80031ec:	463e      	mov	r6, r7
 80031ee:	4632      	mov	r2, r6
 80031f0:	6820      	ldr	r0, [r4, #0]
 80031f2:	4641      	mov	r1, r8
 80031f4:	f000 fab6 	bl	8003764 <memmove>
 80031f8:	68a3      	ldr	r3, [r4, #8]
 80031fa:	6822      	ldr	r2, [r4, #0]
 80031fc:	1b9b      	subs	r3, r3, r6
 80031fe:	4432      	add	r2, r6
 8003200:	60a3      	str	r3, [r4, #8]
 8003202:	6022      	str	r2, [r4, #0]
 8003204:	2000      	movs	r0, #0
 8003206:	e7db      	b.n	80031c0 <__ssputs_r+0x58>
 8003208:	462a      	mov	r2, r5
 800320a:	f000 fb6f 	bl	80038ec <_realloc_r>
 800320e:	4606      	mov	r6, r0
 8003210:	2800      	cmp	r0, #0
 8003212:	d1e1      	bne.n	80031d8 <__ssputs_r+0x70>
 8003214:	6921      	ldr	r1, [r4, #16]
 8003216:	4650      	mov	r0, sl
 8003218:	f000 fabe 	bl	8003798 <_free_r>
 800321c:	e7c7      	b.n	80031ae <__ssputs_r+0x46>
	...

08003220 <_svfiprintf_r>:
 8003220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003224:	4698      	mov	r8, r3
 8003226:	898b      	ldrh	r3, [r1, #12]
 8003228:	061b      	lsls	r3, r3, #24
 800322a:	b09d      	sub	sp, #116	; 0x74
 800322c:	4607      	mov	r7, r0
 800322e:	460d      	mov	r5, r1
 8003230:	4614      	mov	r4, r2
 8003232:	d50e      	bpl.n	8003252 <_svfiprintf_r+0x32>
 8003234:	690b      	ldr	r3, [r1, #16]
 8003236:	b963      	cbnz	r3, 8003252 <_svfiprintf_r+0x32>
 8003238:	2140      	movs	r1, #64	; 0x40
 800323a:	f000 fafd 	bl	8003838 <_malloc_r>
 800323e:	6028      	str	r0, [r5, #0]
 8003240:	6128      	str	r0, [r5, #16]
 8003242:	b920      	cbnz	r0, 800324e <_svfiprintf_r+0x2e>
 8003244:	230c      	movs	r3, #12
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800324c:	e0d1      	b.n	80033f2 <_svfiprintf_r+0x1d2>
 800324e:	2340      	movs	r3, #64	; 0x40
 8003250:	616b      	str	r3, [r5, #20]
 8003252:	2300      	movs	r3, #0
 8003254:	9309      	str	r3, [sp, #36]	; 0x24
 8003256:	2320      	movs	r3, #32
 8003258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800325c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003260:	2330      	movs	r3, #48	; 0x30
 8003262:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800340c <_svfiprintf_r+0x1ec>
 8003266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800326a:	f04f 0901 	mov.w	r9, #1
 800326e:	4623      	mov	r3, r4
 8003270:	469a      	mov	sl, r3
 8003272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003276:	b10a      	cbz	r2, 800327c <_svfiprintf_r+0x5c>
 8003278:	2a25      	cmp	r2, #37	; 0x25
 800327a:	d1f9      	bne.n	8003270 <_svfiprintf_r+0x50>
 800327c:	ebba 0b04 	subs.w	fp, sl, r4
 8003280:	d00b      	beq.n	800329a <_svfiprintf_r+0x7a>
 8003282:	465b      	mov	r3, fp
 8003284:	4622      	mov	r2, r4
 8003286:	4629      	mov	r1, r5
 8003288:	4638      	mov	r0, r7
 800328a:	f7ff ff6d 	bl	8003168 <__ssputs_r>
 800328e:	3001      	adds	r0, #1
 8003290:	f000 80aa 	beq.w	80033e8 <_svfiprintf_r+0x1c8>
 8003294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003296:	445a      	add	r2, fp
 8003298:	9209      	str	r2, [sp, #36]	; 0x24
 800329a:	f89a 3000 	ldrb.w	r3, [sl]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80a2 	beq.w	80033e8 <_svfiprintf_r+0x1c8>
 80032a4:	2300      	movs	r3, #0
 80032a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032ae:	f10a 0a01 	add.w	sl, sl, #1
 80032b2:	9304      	str	r3, [sp, #16]
 80032b4:	9307      	str	r3, [sp, #28]
 80032b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032ba:	931a      	str	r3, [sp, #104]	; 0x68
 80032bc:	4654      	mov	r4, sl
 80032be:	2205      	movs	r2, #5
 80032c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032c4:	4851      	ldr	r0, [pc, #324]	; (800340c <_svfiprintf_r+0x1ec>)
 80032c6:	f7fc ff93 	bl	80001f0 <memchr>
 80032ca:	9a04      	ldr	r2, [sp, #16]
 80032cc:	b9d8      	cbnz	r0, 8003306 <_svfiprintf_r+0xe6>
 80032ce:	06d0      	lsls	r0, r2, #27
 80032d0:	bf44      	itt	mi
 80032d2:	2320      	movmi	r3, #32
 80032d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032d8:	0711      	lsls	r1, r2, #28
 80032da:	bf44      	itt	mi
 80032dc:	232b      	movmi	r3, #43	; 0x2b
 80032de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032e2:	f89a 3000 	ldrb.w	r3, [sl]
 80032e6:	2b2a      	cmp	r3, #42	; 0x2a
 80032e8:	d015      	beq.n	8003316 <_svfiprintf_r+0xf6>
 80032ea:	9a07      	ldr	r2, [sp, #28]
 80032ec:	4654      	mov	r4, sl
 80032ee:	2000      	movs	r0, #0
 80032f0:	f04f 0c0a 	mov.w	ip, #10
 80032f4:	4621      	mov	r1, r4
 80032f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032fa:	3b30      	subs	r3, #48	; 0x30
 80032fc:	2b09      	cmp	r3, #9
 80032fe:	d94e      	bls.n	800339e <_svfiprintf_r+0x17e>
 8003300:	b1b0      	cbz	r0, 8003330 <_svfiprintf_r+0x110>
 8003302:	9207      	str	r2, [sp, #28]
 8003304:	e014      	b.n	8003330 <_svfiprintf_r+0x110>
 8003306:	eba0 0308 	sub.w	r3, r0, r8
 800330a:	fa09 f303 	lsl.w	r3, r9, r3
 800330e:	4313      	orrs	r3, r2
 8003310:	9304      	str	r3, [sp, #16]
 8003312:	46a2      	mov	sl, r4
 8003314:	e7d2      	b.n	80032bc <_svfiprintf_r+0x9c>
 8003316:	9b03      	ldr	r3, [sp, #12]
 8003318:	1d19      	adds	r1, r3, #4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	9103      	str	r1, [sp, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	bfbb      	ittet	lt
 8003322:	425b      	neglt	r3, r3
 8003324:	f042 0202 	orrlt.w	r2, r2, #2
 8003328:	9307      	strge	r3, [sp, #28]
 800332a:	9307      	strlt	r3, [sp, #28]
 800332c:	bfb8      	it	lt
 800332e:	9204      	strlt	r2, [sp, #16]
 8003330:	7823      	ldrb	r3, [r4, #0]
 8003332:	2b2e      	cmp	r3, #46	; 0x2e
 8003334:	d10c      	bne.n	8003350 <_svfiprintf_r+0x130>
 8003336:	7863      	ldrb	r3, [r4, #1]
 8003338:	2b2a      	cmp	r3, #42	; 0x2a
 800333a:	d135      	bne.n	80033a8 <_svfiprintf_r+0x188>
 800333c:	9b03      	ldr	r3, [sp, #12]
 800333e:	1d1a      	adds	r2, r3, #4
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	9203      	str	r2, [sp, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	bfb8      	it	lt
 8003348:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800334c:	3402      	adds	r4, #2
 800334e:	9305      	str	r3, [sp, #20]
 8003350:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800341c <_svfiprintf_r+0x1fc>
 8003354:	7821      	ldrb	r1, [r4, #0]
 8003356:	2203      	movs	r2, #3
 8003358:	4650      	mov	r0, sl
 800335a:	f7fc ff49 	bl	80001f0 <memchr>
 800335e:	b140      	cbz	r0, 8003372 <_svfiprintf_r+0x152>
 8003360:	2340      	movs	r3, #64	; 0x40
 8003362:	eba0 000a 	sub.w	r0, r0, sl
 8003366:	fa03 f000 	lsl.w	r0, r3, r0
 800336a:	9b04      	ldr	r3, [sp, #16]
 800336c:	4303      	orrs	r3, r0
 800336e:	3401      	adds	r4, #1
 8003370:	9304      	str	r3, [sp, #16]
 8003372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003376:	4826      	ldr	r0, [pc, #152]	; (8003410 <_svfiprintf_r+0x1f0>)
 8003378:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800337c:	2206      	movs	r2, #6
 800337e:	f7fc ff37 	bl	80001f0 <memchr>
 8003382:	2800      	cmp	r0, #0
 8003384:	d038      	beq.n	80033f8 <_svfiprintf_r+0x1d8>
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <_svfiprintf_r+0x1f4>)
 8003388:	bb1b      	cbnz	r3, 80033d2 <_svfiprintf_r+0x1b2>
 800338a:	9b03      	ldr	r3, [sp, #12]
 800338c:	3307      	adds	r3, #7
 800338e:	f023 0307 	bic.w	r3, r3, #7
 8003392:	3308      	adds	r3, #8
 8003394:	9303      	str	r3, [sp, #12]
 8003396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003398:	4433      	add	r3, r6
 800339a:	9309      	str	r3, [sp, #36]	; 0x24
 800339c:	e767      	b.n	800326e <_svfiprintf_r+0x4e>
 800339e:	fb0c 3202 	mla	r2, ip, r2, r3
 80033a2:	460c      	mov	r4, r1
 80033a4:	2001      	movs	r0, #1
 80033a6:	e7a5      	b.n	80032f4 <_svfiprintf_r+0xd4>
 80033a8:	2300      	movs	r3, #0
 80033aa:	3401      	adds	r4, #1
 80033ac:	9305      	str	r3, [sp, #20]
 80033ae:	4619      	mov	r1, r3
 80033b0:	f04f 0c0a 	mov.w	ip, #10
 80033b4:	4620      	mov	r0, r4
 80033b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033ba:	3a30      	subs	r2, #48	; 0x30
 80033bc:	2a09      	cmp	r2, #9
 80033be:	d903      	bls.n	80033c8 <_svfiprintf_r+0x1a8>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0c5      	beq.n	8003350 <_svfiprintf_r+0x130>
 80033c4:	9105      	str	r1, [sp, #20]
 80033c6:	e7c3      	b.n	8003350 <_svfiprintf_r+0x130>
 80033c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80033cc:	4604      	mov	r4, r0
 80033ce:	2301      	movs	r3, #1
 80033d0:	e7f0      	b.n	80033b4 <_svfiprintf_r+0x194>
 80033d2:	ab03      	add	r3, sp, #12
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	462a      	mov	r2, r5
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <_svfiprintf_r+0x1f8>)
 80033da:	a904      	add	r1, sp, #16
 80033dc:	4638      	mov	r0, r7
 80033de:	f3af 8000 	nop.w
 80033e2:	1c42      	adds	r2, r0, #1
 80033e4:	4606      	mov	r6, r0
 80033e6:	d1d6      	bne.n	8003396 <_svfiprintf_r+0x176>
 80033e8:	89ab      	ldrh	r3, [r5, #12]
 80033ea:	065b      	lsls	r3, r3, #25
 80033ec:	f53f af2c 	bmi.w	8003248 <_svfiprintf_r+0x28>
 80033f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033f2:	b01d      	add	sp, #116	; 0x74
 80033f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033f8:	ab03      	add	r3, sp, #12
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	462a      	mov	r2, r5
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <_svfiprintf_r+0x1f8>)
 8003400:	a904      	add	r1, sp, #16
 8003402:	4638      	mov	r0, r7
 8003404:	f000 f87a 	bl	80034fc <_printf_i>
 8003408:	e7eb      	b.n	80033e2 <_svfiprintf_r+0x1c2>
 800340a:	bf00      	nop
 800340c:	08003a08 	.word	0x08003a08
 8003410:	08003a12 	.word	0x08003a12
 8003414:	00000000 	.word	0x00000000
 8003418:	08003169 	.word	0x08003169
 800341c:	08003a0e 	.word	0x08003a0e

08003420 <_printf_common>:
 8003420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003424:	4616      	mov	r6, r2
 8003426:	4699      	mov	r9, r3
 8003428:	688a      	ldr	r2, [r1, #8]
 800342a:	690b      	ldr	r3, [r1, #16]
 800342c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003430:	4293      	cmp	r3, r2
 8003432:	bfb8      	it	lt
 8003434:	4613      	movlt	r3, r2
 8003436:	6033      	str	r3, [r6, #0]
 8003438:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800343c:	4607      	mov	r7, r0
 800343e:	460c      	mov	r4, r1
 8003440:	b10a      	cbz	r2, 8003446 <_printf_common+0x26>
 8003442:	3301      	adds	r3, #1
 8003444:	6033      	str	r3, [r6, #0]
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	0699      	lsls	r1, r3, #26
 800344a:	bf42      	ittt	mi
 800344c:	6833      	ldrmi	r3, [r6, #0]
 800344e:	3302      	addmi	r3, #2
 8003450:	6033      	strmi	r3, [r6, #0]
 8003452:	6825      	ldr	r5, [r4, #0]
 8003454:	f015 0506 	ands.w	r5, r5, #6
 8003458:	d106      	bne.n	8003468 <_printf_common+0x48>
 800345a:	f104 0a19 	add.w	sl, r4, #25
 800345e:	68e3      	ldr	r3, [r4, #12]
 8003460:	6832      	ldr	r2, [r6, #0]
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	42ab      	cmp	r3, r5
 8003466:	dc26      	bgt.n	80034b6 <_printf_common+0x96>
 8003468:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800346c:	1e13      	subs	r3, r2, #0
 800346e:	6822      	ldr	r2, [r4, #0]
 8003470:	bf18      	it	ne
 8003472:	2301      	movne	r3, #1
 8003474:	0692      	lsls	r2, r2, #26
 8003476:	d42b      	bmi.n	80034d0 <_printf_common+0xb0>
 8003478:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800347c:	4649      	mov	r1, r9
 800347e:	4638      	mov	r0, r7
 8003480:	47c0      	blx	r8
 8003482:	3001      	adds	r0, #1
 8003484:	d01e      	beq.n	80034c4 <_printf_common+0xa4>
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	68e5      	ldr	r5, [r4, #12]
 800348a:	6832      	ldr	r2, [r6, #0]
 800348c:	f003 0306 	and.w	r3, r3, #6
 8003490:	2b04      	cmp	r3, #4
 8003492:	bf08      	it	eq
 8003494:	1aad      	subeq	r5, r5, r2
 8003496:	68a3      	ldr	r3, [r4, #8]
 8003498:	6922      	ldr	r2, [r4, #16]
 800349a:	bf0c      	ite	eq
 800349c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034a0:	2500      	movne	r5, #0
 80034a2:	4293      	cmp	r3, r2
 80034a4:	bfc4      	itt	gt
 80034a6:	1a9b      	subgt	r3, r3, r2
 80034a8:	18ed      	addgt	r5, r5, r3
 80034aa:	2600      	movs	r6, #0
 80034ac:	341a      	adds	r4, #26
 80034ae:	42b5      	cmp	r5, r6
 80034b0:	d11a      	bne.n	80034e8 <_printf_common+0xc8>
 80034b2:	2000      	movs	r0, #0
 80034b4:	e008      	b.n	80034c8 <_printf_common+0xa8>
 80034b6:	2301      	movs	r3, #1
 80034b8:	4652      	mov	r2, sl
 80034ba:	4649      	mov	r1, r9
 80034bc:	4638      	mov	r0, r7
 80034be:	47c0      	blx	r8
 80034c0:	3001      	adds	r0, #1
 80034c2:	d103      	bne.n	80034cc <_printf_common+0xac>
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034cc:	3501      	adds	r5, #1
 80034ce:	e7c6      	b.n	800345e <_printf_common+0x3e>
 80034d0:	18e1      	adds	r1, r4, r3
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	2030      	movs	r0, #48	; 0x30
 80034d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034da:	4422      	add	r2, r4
 80034dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034e4:	3302      	adds	r3, #2
 80034e6:	e7c7      	b.n	8003478 <_printf_common+0x58>
 80034e8:	2301      	movs	r3, #1
 80034ea:	4622      	mov	r2, r4
 80034ec:	4649      	mov	r1, r9
 80034ee:	4638      	mov	r0, r7
 80034f0:	47c0      	blx	r8
 80034f2:	3001      	adds	r0, #1
 80034f4:	d0e6      	beq.n	80034c4 <_printf_common+0xa4>
 80034f6:	3601      	adds	r6, #1
 80034f8:	e7d9      	b.n	80034ae <_printf_common+0x8e>
	...

080034fc <_printf_i>:
 80034fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003500:	460c      	mov	r4, r1
 8003502:	4691      	mov	r9, r2
 8003504:	7e27      	ldrb	r7, [r4, #24]
 8003506:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003508:	2f78      	cmp	r7, #120	; 0x78
 800350a:	4680      	mov	r8, r0
 800350c:	469a      	mov	sl, r3
 800350e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003512:	d807      	bhi.n	8003524 <_printf_i+0x28>
 8003514:	2f62      	cmp	r7, #98	; 0x62
 8003516:	d80a      	bhi.n	800352e <_printf_i+0x32>
 8003518:	2f00      	cmp	r7, #0
 800351a:	f000 80d8 	beq.w	80036ce <_printf_i+0x1d2>
 800351e:	2f58      	cmp	r7, #88	; 0x58
 8003520:	f000 80a3 	beq.w	800366a <_printf_i+0x16e>
 8003524:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003528:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800352c:	e03a      	b.n	80035a4 <_printf_i+0xa8>
 800352e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003532:	2b15      	cmp	r3, #21
 8003534:	d8f6      	bhi.n	8003524 <_printf_i+0x28>
 8003536:	a001      	add	r0, pc, #4	; (adr r0, 800353c <_printf_i+0x40>)
 8003538:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800353c:	08003595 	.word	0x08003595
 8003540:	080035a9 	.word	0x080035a9
 8003544:	08003525 	.word	0x08003525
 8003548:	08003525 	.word	0x08003525
 800354c:	08003525 	.word	0x08003525
 8003550:	08003525 	.word	0x08003525
 8003554:	080035a9 	.word	0x080035a9
 8003558:	08003525 	.word	0x08003525
 800355c:	08003525 	.word	0x08003525
 8003560:	08003525 	.word	0x08003525
 8003564:	08003525 	.word	0x08003525
 8003568:	080036b5 	.word	0x080036b5
 800356c:	080035d9 	.word	0x080035d9
 8003570:	08003697 	.word	0x08003697
 8003574:	08003525 	.word	0x08003525
 8003578:	08003525 	.word	0x08003525
 800357c:	080036d7 	.word	0x080036d7
 8003580:	08003525 	.word	0x08003525
 8003584:	080035d9 	.word	0x080035d9
 8003588:	08003525 	.word	0x08003525
 800358c:	08003525 	.word	0x08003525
 8003590:	0800369f 	.word	0x0800369f
 8003594:	680b      	ldr	r3, [r1, #0]
 8003596:	1d1a      	adds	r2, r3, #4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	600a      	str	r2, [r1, #0]
 800359c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0a3      	b.n	80036f0 <_printf_i+0x1f4>
 80035a8:	6825      	ldr	r5, [r4, #0]
 80035aa:	6808      	ldr	r0, [r1, #0]
 80035ac:	062e      	lsls	r6, r5, #24
 80035ae:	f100 0304 	add.w	r3, r0, #4
 80035b2:	d50a      	bpl.n	80035ca <_printf_i+0xce>
 80035b4:	6805      	ldr	r5, [r0, #0]
 80035b6:	600b      	str	r3, [r1, #0]
 80035b8:	2d00      	cmp	r5, #0
 80035ba:	da03      	bge.n	80035c4 <_printf_i+0xc8>
 80035bc:	232d      	movs	r3, #45	; 0x2d
 80035be:	426d      	negs	r5, r5
 80035c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035c4:	485e      	ldr	r0, [pc, #376]	; (8003740 <_printf_i+0x244>)
 80035c6:	230a      	movs	r3, #10
 80035c8:	e019      	b.n	80035fe <_printf_i+0x102>
 80035ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80035ce:	6805      	ldr	r5, [r0, #0]
 80035d0:	600b      	str	r3, [r1, #0]
 80035d2:	bf18      	it	ne
 80035d4:	b22d      	sxthne	r5, r5
 80035d6:	e7ef      	b.n	80035b8 <_printf_i+0xbc>
 80035d8:	680b      	ldr	r3, [r1, #0]
 80035da:	6825      	ldr	r5, [r4, #0]
 80035dc:	1d18      	adds	r0, r3, #4
 80035de:	6008      	str	r0, [r1, #0]
 80035e0:	0628      	lsls	r0, r5, #24
 80035e2:	d501      	bpl.n	80035e8 <_printf_i+0xec>
 80035e4:	681d      	ldr	r5, [r3, #0]
 80035e6:	e002      	b.n	80035ee <_printf_i+0xf2>
 80035e8:	0669      	lsls	r1, r5, #25
 80035ea:	d5fb      	bpl.n	80035e4 <_printf_i+0xe8>
 80035ec:	881d      	ldrh	r5, [r3, #0]
 80035ee:	4854      	ldr	r0, [pc, #336]	; (8003740 <_printf_i+0x244>)
 80035f0:	2f6f      	cmp	r7, #111	; 0x6f
 80035f2:	bf0c      	ite	eq
 80035f4:	2308      	moveq	r3, #8
 80035f6:	230a      	movne	r3, #10
 80035f8:	2100      	movs	r1, #0
 80035fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035fe:	6866      	ldr	r6, [r4, #4]
 8003600:	60a6      	str	r6, [r4, #8]
 8003602:	2e00      	cmp	r6, #0
 8003604:	bfa2      	ittt	ge
 8003606:	6821      	ldrge	r1, [r4, #0]
 8003608:	f021 0104 	bicge.w	r1, r1, #4
 800360c:	6021      	strge	r1, [r4, #0]
 800360e:	b90d      	cbnz	r5, 8003614 <_printf_i+0x118>
 8003610:	2e00      	cmp	r6, #0
 8003612:	d04d      	beq.n	80036b0 <_printf_i+0x1b4>
 8003614:	4616      	mov	r6, r2
 8003616:	fbb5 f1f3 	udiv	r1, r5, r3
 800361a:	fb03 5711 	mls	r7, r3, r1, r5
 800361e:	5dc7      	ldrb	r7, [r0, r7]
 8003620:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003624:	462f      	mov	r7, r5
 8003626:	42bb      	cmp	r3, r7
 8003628:	460d      	mov	r5, r1
 800362a:	d9f4      	bls.n	8003616 <_printf_i+0x11a>
 800362c:	2b08      	cmp	r3, #8
 800362e:	d10b      	bne.n	8003648 <_printf_i+0x14c>
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	07df      	lsls	r7, r3, #31
 8003634:	d508      	bpl.n	8003648 <_printf_i+0x14c>
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	6861      	ldr	r1, [r4, #4]
 800363a:	4299      	cmp	r1, r3
 800363c:	bfde      	ittt	le
 800363e:	2330      	movle	r3, #48	; 0x30
 8003640:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003644:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003648:	1b92      	subs	r2, r2, r6
 800364a:	6122      	str	r2, [r4, #16]
 800364c:	f8cd a000 	str.w	sl, [sp]
 8003650:	464b      	mov	r3, r9
 8003652:	aa03      	add	r2, sp, #12
 8003654:	4621      	mov	r1, r4
 8003656:	4640      	mov	r0, r8
 8003658:	f7ff fee2 	bl	8003420 <_printf_common>
 800365c:	3001      	adds	r0, #1
 800365e:	d14c      	bne.n	80036fa <_printf_i+0x1fe>
 8003660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003664:	b004      	add	sp, #16
 8003666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800366a:	4835      	ldr	r0, [pc, #212]	; (8003740 <_printf_i+0x244>)
 800366c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	680e      	ldr	r6, [r1, #0]
 8003674:	061f      	lsls	r7, r3, #24
 8003676:	f856 5b04 	ldr.w	r5, [r6], #4
 800367a:	600e      	str	r6, [r1, #0]
 800367c:	d514      	bpl.n	80036a8 <_printf_i+0x1ac>
 800367e:	07d9      	lsls	r1, r3, #31
 8003680:	bf44      	itt	mi
 8003682:	f043 0320 	orrmi.w	r3, r3, #32
 8003686:	6023      	strmi	r3, [r4, #0]
 8003688:	b91d      	cbnz	r5, 8003692 <_printf_i+0x196>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	f023 0320 	bic.w	r3, r3, #32
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	2310      	movs	r3, #16
 8003694:	e7b0      	b.n	80035f8 <_printf_i+0xfc>
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	f043 0320 	orr.w	r3, r3, #32
 800369c:	6023      	str	r3, [r4, #0]
 800369e:	2378      	movs	r3, #120	; 0x78
 80036a0:	4828      	ldr	r0, [pc, #160]	; (8003744 <_printf_i+0x248>)
 80036a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036a6:	e7e3      	b.n	8003670 <_printf_i+0x174>
 80036a8:	065e      	lsls	r6, r3, #25
 80036aa:	bf48      	it	mi
 80036ac:	b2ad      	uxthmi	r5, r5
 80036ae:	e7e6      	b.n	800367e <_printf_i+0x182>
 80036b0:	4616      	mov	r6, r2
 80036b2:	e7bb      	b.n	800362c <_printf_i+0x130>
 80036b4:	680b      	ldr	r3, [r1, #0]
 80036b6:	6826      	ldr	r6, [r4, #0]
 80036b8:	6960      	ldr	r0, [r4, #20]
 80036ba:	1d1d      	adds	r5, r3, #4
 80036bc:	600d      	str	r5, [r1, #0]
 80036be:	0635      	lsls	r5, r6, #24
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	d501      	bpl.n	80036c8 <_printf_i+0x1cc>
 80036c4:	6018      	str	r0, [r3, #0]
 80036c6:	e002      	b.n	80036ce <_printf_i+0x1d2>
 80036c8:	0671      	lsls	r1, r6, #25
 80036ca:	d5fb      	bpl.n	80036c4 <_printf_i+0x1c8>
 80036cc:	8018      	strh	r0, [r3, #0]
 80036ce:	2300      	movs	r3, #0
 80036d0:	6123      	str	r3, [r4, #16]
 80036d2:	4616      	mov	r6, r2
 80036d4:	e7ba      	b.n	800364c <_printf_i+0x150>
 80036d6:	680b      	ldr	r3, [r1, #0]
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	600a      	str	r2, [r1, #0]
 80036dc:	681e      	ldr	r6, [r3, #0]
 80036de:	6862      	ldr	r2, [r4, #4]
 80036e0:	2100      	movs	r1, #0
 80036e2:	4630      	mov	r0, r6
 80036e4:	f7fc fd84 	bl	80001f0 <memchr>
 80036e8:	b108      	cbz	r0, 80036ee <_printf_i+0x1f2>
 80036ea:	1b80      	subs	r0, r0, r6
 80036ec:	6060      	str	r0, [r4, #4]
 80036ee:	6863      	ldr	r3, [r4, #4]
 80036f0:	6123      	str	r3, [r4, #16]
 80036f2:	2300      	movs	r3, #0
 80036f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036f8:	e7a8      	b.n	800364c <_printf_i+0x150>
 80036fa:	6923      	ldr	r3, [r4, #16]
 80036fc:	4632      	mov	r2, r6
 80036fe:	4649      	mov	r1, r9
 8003700:	4640      	mov	r0, r8
 8003702:	47d0      	blx	sl
 8003704:	3001      	adds	r0, #1
 8003706:	d0ab      	beq.n	8003660 <_printf_i+0x164>
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	079b      	lsls	r3, r3, #30
 800370c:	d413      	bmi.n	8003736 <_printf_i+0x23a>
 800370e:	68e0      	ldr	r0, [r4, #12]
 8003710:	9b03      	ldr	r3, [sp, #12]
 8003712:	4298      	cmp	r0, r3
 8003714:	bfb8      	it	lt
 8003716:	4618      	movlt	r0, r3
 8003718:	e7a4      	b.n	8003664 <_printf_i+0x168>
 800371a:	2301      	movs	r3, #1
 800371c:	4632      	mov	r2, r6
 800371e:	4649      	mov	r1, r9
 8003720:	4640      	mov	r0, r8
 8003722:	47d0      	blx	sl
 8003724:	3001      	adds	r0, #1
 8003726:	d09b      	beq.n	8003660 <_printf_i+0x164>
 8003728:	3501      	adds	r5, #1
 800372a:	68e3      	ldr	r3, [r4, #12]
 800372c:	9903      	ldr	r1, [sp, #12]
 800372e:	1a5b      	subs	r3, r3, r1
 8003730:	42ab      	cmp	r3, r5
 8003732:	dcf2      	bgt.n	800371a <_printf_i+0x21e>
 8003734:	e7eb      	b.n	800370e <_printf_i+0x212>
 8003736:	2500      	movs	r5, #0
 8003738:	f104 0619 	add.w	r6, r4, #25
 800373c:	e7f5      	b.n	800372a <_printf_i+0x22e>
 800373e:	bf00      	nop
 8003740:	08003a19 	.word	0x08003a19
 8003744:	08003a2a 	.word	0x08003a2a

08003748 <memcpy>:
 8003748:	440a      	add	r2, r1
 800374a:	4291      	cmp	r1, r2
 800374c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003750:	d100      	bne.n	8003754 <memcpy+0xc>
 8003752:	4770      	bx	lr
 8003754:	b510      	push	{r4, lr}
 8003756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800375a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800375e:	4291      	cmp	r1, r2
 8003760:	d1f9      	bne.n	8003756 <memcpy+0xe>
 8003762:	bd10      	pop	{r4, pc}

08003764 <memmove>:
 8003764:	4288      	cmp	r0, r1
 8003766:	b510      	push	{r4, lr}
 8003768:	eb01 0402 	add.w	r4, r1, r2
 800376c:	d902      	bls.n	8003774 <memmove+0x10>
 800376e:	4284      	cmp	r4, r0
 8003770:	4623      	mov	r3, r4
 8003772:	d807      	bhi.n	8003784 <memmove+0x20>
 8003774:	1e43      	subs	r3, r0, #1
 8003776:	42a1      	cmp	r1, r4
 8003778:	d008      	beq.n	800378c <memmove+0x28>
 800377a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800377e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003782:	e7f8      	b.n	8003776 <memmove+0x12>
 8003784:	4402      	add	r2, r0
 8003786:	4601      	mov	r1, r0
 8003788:	428a      	cmp	r2, r1
 800378a:	d100      	bne.n	800378e <memmove+0x2a>
 800378c:	bd10      	pop	{r4, pc}
 800378e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003796:	e7f7      	b.n	8003788 <memmove+0x24>

08003798 <_free_r>:
 8003798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800379a:	2900      	cmp	r1, #0
 800379c:	d048      	beq.n	8003830 <_free_r+0x98>
 800379e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037a2:	9001      	str	r0, [sp, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f1a1 0404 	sub.w	r4, r1, #4
 80037aa:	bfb8      	it	lt
 80037ac:	18e4      	addlt	r4, r4, r3
 80037ae:	f000 f8d3 	bl	8003958 <__malloc_lock>
 80037b2:	4a20      	ldr	r2, [pc, #128]	; (8003834 <_free_r+0x9c>)
 80037b4:	9801      	ldr	r0, [sp, #4]
 80037b6:	6813      	ldr	r3, [r2, #0]
 80037b8:	4615      	mov	r5, r2
 80037ba:	b933      	cbnz	r3, 80037ca <_free_r+0x32>
 80037bc:	6063      	str	r3, [r4, #4]
 80037be:	6014      	str	r4, [r2, #0]
 80037c0:	b003      	add	sp, #12
 80037c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037c6:	f000 b8cd 	b.w	8003964 <__malloc_unlock>
 80037ca:	42a3      	cmp	r3, r4
 80037cc:	d90b      	bls.n	80037e6 <_free_r+0x4e>
 80037ce:	6821      	ldr	r1, [r4, #0]
 80037d0:	1862      	adds	r2, r4, r1
 80037d2:	4293      	cmp	r3, r2
 80037d4:	bf04      	itt	eq
 80037d6:	681a      	ldreq	r2, [r3, #0]
 80037d8:	685b      	ldreq	r3, [r3, #4]
 80037da:	6063      	str	r3, [r4, #4]
 80037dc:	bf04      	itt	eq
 80037de:	1852      	addeq	r2, r2, r1
 80037e0:	6022      	streq	r2, [r4, #0]
 80037e2:	602c      	str	r4, [r5, #0]
 80037e4:	e7ec      	b.n	80037c0 <_free_r+0x28>
 80037e6:	461a      	mov	r2, r3
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	b10b      	cbz	r3, 80037f0 <_free_r+0x58>
 80037ec:	42a3      	cmp	r3, r4
 80037ee:	d9fa      	bls.n	80037e6 <_free_r+0x4e>
 80037f0:	6811      	ldr	r1, [r2, #0]
 80037f2:	1855      	adds	r5, r2, r1
 80037f4:	42a5      	cmp	r5, r4
 80037f6:	d10b      	bne.n	8003810 <_free_r+0x78>
 80037f8:	6824      	ldr	r4, [r4, #0]
 80037fa:	4421      	add	r1, r4
 80037fc:	1854      	adds	r4, r2, r1
 80037fe:	42a3      	cmp	r3, r4
 8003800:	6011      	str	r1, [r2, #0]
 8003802:	d1dd      	bne.n	80037c0 <_free_r+0x28>
 8003804:	681c      	ldr	r4, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	6053      	str	r3, [r2, #4]
 800380a:	4421      	add	r1, r4
 800380c:	6011      	str	r1, [r2, #0]
 800380e:	e7d7      	b.n	80037c0 <_free_r+0x28>
 8003810:	d902      	bls.n	8003818 <_free_r+0x80>
 8003812:	230c      	movs	r3, #12
 8003814:	6003      	str	r3, [r0, #0]
 8003816:	e7d3      	b.n	80037c0 <_free_r+0x28>
 8003818:	6825      	ldr	r5, [r4, #0]
 800381a:	1961      	adds	r1, r4, r5
 800381c:	428b      	cmp	r3, r1
 800381e:	bf04      	itt	eq
 8003820:	6819      	ldreq	r1, [r3, #0]
 8003822:	685b      	ldreq	r3, [r3, #4]
 8003824:	6063      	str	r3, [r4, #4]
 8003826:	bf04      	itt	eq
 8003828:	1949      	addeq	r1, r1, r5
 800382a:	6021      	streq	r1, [r4, #0]
 800382c:	6054      	str	r4, [r2, #4]
 800382e:	e7c7      	b.n	80037c0 <_free_r+0x28>
 8003830:	b003      	add	sp, #12
 8003832:	bd30      	pop	{r4, r5, pc}
 8003834:	200000d4 	.word	0x200000d4

08003838 <_malloc_r>:
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	1ccd      	adds	r5, r1, #3
 800383c:	f025 0503 	bic.w	r5, r5, #3
 8003840:	3508      	adds	r5, #8
 8003842:	2d0c      	cmp	r5, #12
 8003844:	bf38      	it	cc
 8003846:	250c      	movcc	r5, #12
 8003848:	2d00      	cmp	r5, #0
 800384a:	4606      	mov	r6, r0
 800384c:	db01      	blt.n	8003852 <_malloc_r+0x1a>
 800384e:	42a9      	cmp	r1, r5
 8003850:	d903      	bls.n	800385a <_malloc_r+0x22>
 8003852:	230c      	movs	r3, #12
 8003854:	6033      	str	r3, [r6, #0]
 8003856:	2000      	movs	r0, #0
 8003858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800385a:	f000 f87d 	bl	8003958 <__malloc_lock>
 800385e:	4921      	ldr	r1, [pc, #132]	; (80038e4 <_malloc_r+0xac>)
 8003860:	680a      	ldr	r2, [r1, #0]
 8003862:	4614      	mov	r4, r2
 8003864:	b99c      	cbnz	r4, 800388e <_malloc_r+0x56>
 8003866:	4f20      	ldr	r7, [pc, #128]	; (80038e8 <_malloc_r+0xb0>)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	b923      	cbnz	r3, 8003876 <_malloc_r+0x3e>
 800386c:	4621      	mov	r1, r4
 800386e:	4630      	mov	r0, r6
 8003870:	f000 f862 	bl	8003938 <_sbrk_r>
 8003874:	6038      	str	r0, [r7, #0]
 8003876:	4629      	mov	r1, r5
 8003878:	4630      	mov	r0, r6
 800387a:	f000 f85d 	bl	8003938 <_sbrk_r>
 800387e:	1c43      	adds	r3, r0, #1
 8003880:	d123      	bne.n	80038ca <_malloc_r+0x92>
 8003882:	230c      	movs	r3, #12
 8003884:	6033      	str	r3, [r6, #0]
 8003886:	4630      	mov	r0, r6
 8003888:	f000 f86c 	bl	8003964 <__malloc_unlock>
 800388c:	e7e3      	b.n	8003856 <_malloc_r+0x1e>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	1b5b      	subs	r3, r3, r5
 8003892:	d417      	bmi.n	80038c4 <_malloc_r+0x8c>
 8003894:	2b0b      	cmp	r3, #11
 8003896:	d903      	bls.n	80038a0 <_malloc_r+0x68>
 8003898:	6023      	str	r3, [r4, #0]
 800389a:	441c      	add	r4, r3
 800389c:	6025      	str	r5, [r4, #0]
 800389e:	e004      	b.n	80038aa <_malloc_r+0x72>
 80038a0:	6863      	ldr	r3, [r4, #4]
 80038a2:	42a2      	cmp	r2, r4
 80038a4:	bf0c      	ite	eq
 80038a6:	600b      	streq	r3, [r1, #0]
 80038a8:	6053      	strne	r3, [r2, #4]
 80038aa:	4630      	mov	r0, r6
 80038ac:	f000 f85a 	bl	8003964 <__malloc_unlock>
 80038b0:	f104 000b 	add.w	r0, r4, #11
 80038b4:	1d23      	adds	r3, r4, #4
 80038b6:	f020 0007 	bic.w	r0, r0, #7
 80038ba:	1ac2      	subs	r2, r0, r3
 80038bc:	d0cc      	beq.n	8003858 <_malloc_r+0x20>
 80038be:	1a1b      	subs	r3, r3, r0
 80038c0:	50a3      	str	r3, [r4, r2]
 80038c2:	e7c9      	b.n	8003858 <_malloc_r+0x20>
 80038c4:	4622      	mov	r2, r4
 80038c6:	6864      	ldr	r4, [r4, #4]
 80038c8:	e7cc      	b.n	8003864 <_malloc_r+0x2c>
 80038ca:	1cc4      	adds	r4, r0, #3
 80038cc:	f024 0403 	bic.w	r4, r4, #3
 80038d0:	42a0      	cmp	r0, r4
 80038d2:	d0e3      	beq.n	800389c <_malloc_r+0x64>
 80038d4:	1a21      	subs	r1, r4, r0
 80038d6:	4630      	mov	r0, r6
 80038d8:	f000 f82e 	bl	8003938 <_sbrk_r>
 80038dc:	3001      	adds	r0, #1
 80038de:	d1dd      	bne.n	800389c <_malloc_r+0x64>
 80038e0:	e7cf      	b.n	8003882 <_malloc_r+0x4a>
 80038e2:	bf00      	nop
 80038e4:	200000d4 	.word	0x200000d4
 80038e8:	200000d8 	.word	0x200000d8

080038ec <_realloc_r>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	4607      	mov	r7, r0
 80038f0:	4614      	mov	r4, r2
 80038f2:	460e      	mov	r6, r1
 80038f4:	b921      	cbnz	r1, 8003900 <_realloc_r+0x14>
 80038f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80038fa:	4611      	mov	r1, r2
 80038fc:	f7ff bf9c 	b.w	8003838 <_malloc_r>
 8003900:	b922      	cbnz	r2, 800390c <_realloc_r+0x20>
 8003902:	f7ff ff49 	bl	8003798 <_free_r>
 8003906:	4625      	mov	r5, r4
 8003908:	4628      	mov	r0, r5
 800390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800390c:	f000 f830 	bl	8003970 <_malloc_usable_size_r>
 8003910:	42a0      	cmp	r0, r4
 8003912:	d20f      	bcs.n	8003934 <_realloc_r+0x48>
 8003914:	4621      	mov	r1, r4
 8003916:	4638      	mov	r0, r7
 8003918:	f7ff ff8e 	bl	8003838 <_malloc_r>
 800391c:	4605      	mov	r5, r0
 800391e:	2800      	cmp	r0, #0
 8003920:	d0f2      	beq.n	8003908 <_realloc_r+0x1c>
 8003922:	4631      	mov	r1, r6
 8003924:	4622      	mov	r2, r4
 8003926:	f7ff ff0f 	bl	8003748 <memcpy>
 800392a:	4631      	mov	r1, r6
 800392c:	4638      	mov	r0, r7
 800392e:	f7ff ff33 	bl	8003798 <_free_r>
 8003932:	e7e9      	b.n	8003908 <_realloc_r+0x1c>
 8003934:	4635      	mov	r5, r6
 8003936:	e7e7      	b.n	8003908 <_realloc_r+0x1c>

08003938 <_sbrk_r>:
 8003938:	b538      	push	{r3, r4, r5, lr}
 800393a:	4d06      	ldr	r5, [pc, #24]	; (8003954 <_sbrk_r+0x1c>)
 800393c:	2300      	movs	r3, #0
 800393e:	4604      	mov	r4, r0
 8003940:	4608      	mov	r0, r1
 8003942:	602b      	str	r3, [r5, #0]
 8003944:	f7fd f8e2 	bl	8000b0c <_sbrk>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	d102      	bne.n	8003952 <_sbrk_r+0x1a>
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	b103      	cbz	r3, 8003952 <_sbrk_r+0x1a>
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	bd38      	pop	{r3, r4, r5, pc}
 8003954:	20000190 	.word	0x20000190

08003958 <__malloc_lock>:
 8003958:	4801      	ldr	r0, [pc, #4]	; (8003960 <__malloc_lock+0x8>)
 800395a:	f000 b811 	b.w	8003980 <__retarget_lock_acquire_recursive>
 800395e:	bf00      	nop
 8003960:	20000198 	.word	0x20000198

08003964 <__malloc_unlock>:
 8003964:	4801      	ldr	r0, [pc, #4]	; (800396c <__malloc_unlock+0x8>)
 8003966:	f000 b80c 	b.w	8003982 <__retarget_lock_release_recursive>
 800396a:	bf00      	nop
 800396c:	20000198 	.word	0x20000198

08003970 <_malloc_usable_size_r>:
 8003970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003974:	1f18      	subs	r0, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	bfbc      	itt	lt
 800397a:	580b      	ldrlt	r3, [r1, r0]
 800397c:	18c0      	addlt	r0, r0, r3
 800397e:	4770      	bx	lr

08003980 <__retarget_lock_acquire_recursive>:
 8003980:	4770      	bx	lr

08003982 <__retarget_lock_release_recursive>:
 8003982:	4770      	bx	lr

08003984 <_init>:
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	bf00      	nop
 8003988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398a:	bc08      	pop	{r3}
 800398c:	469e      	mov	lr, r3
 800398e:	4770      	bx	lr

08003990 <_fini>:
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003992:	bf00      	nop
 8003994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003996:	bc08      	pop	{r3}
 8003998:	469e      	mov	lr, r3
 800399a:	4770      	bx	lr
